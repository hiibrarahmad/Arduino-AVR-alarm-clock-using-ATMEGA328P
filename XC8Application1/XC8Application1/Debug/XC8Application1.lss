
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000143a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005b  00000000  00000000  0000143a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  00001495  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000185a  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000803  00000000  00000000  00002d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000081d  00000000  00000000  0000355a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  00003d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000238  00000000  00000000  00003ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000c58  00000000  00000000  00004110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00004d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000133c  0000133c  00001430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.__vector_11 00000134  00000d74  00000d74  00000e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.setbuzzer 0000008c  00000ffc  00000ffc  000010f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.writenibble 00000016  00001326  00001326  0000141a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.writecommand 0000002c  00001290  00001290  00001384  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.init_lcd 00000098  00000f64  00000f64  00001058  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.moveto  00000026  000012e8  000012e8  000013dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.writedata 0000002c  000012bc  000012bc  000013b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.stringout 00000018  0000130e  0000130e  00001402  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data 00000041  000000d4  000000d4  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .text.displayAlmststus 00000074  00001100  00001100  000011f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    00000816  00000116  00000116  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.backtime 00000002  00800100  00800100  0000143a  2**0
                  ALLOC
 25 .bss.ALMstatus 00000002  00800102  00800102  0000143a  2**0
                  ALLOC
 26 .bss.ALMHOU1  00000002  00800104  00800104  0000143a  2**0
                  ALLOC
 27 .bss.ALMHOU2  00000002  00800106  00800106  0000143a  2**0
                  ALLOC
 28 .bss.ALMMIN1  00000002  00800108  00800108  0000143a  2**0
                  ALLOC
 29 .data.ALMMIN2 00000002  0080010a  00001340  00001434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 30 .bss.HOU1     00000002  0080010c  0080010c  0000143a  2**0
                  ALLOC
 31 .bss.HOU2     00000002  0080010e  0080010e  0000143a  2**0
                  ALLOC
 32 .bss.MIN1     00000002  00800110  00800110  0000143a  2**0
                  ALLOC
 33 .bss.MIN2     00000002  00800112  00800112  0000143a  2**0
                  ALLOC
 34 .data.SEC1    00000002  00800114  00001342  00001436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .data.SEC2    00000002  00800116  00001344  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 36 .text.avrlibc 00000032  0000125e  0000125e  00001352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.avrlibc 00000046  00001174  00001174  00001268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.avrlibc 00000448  0000092c  0000092c  00000a20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.avrlibc 00000036  000011f2  000011f2  000012e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.avrlibc 00000078  00001088  00001088  0000117c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.avrlibc 000000bc  00000ea8  00000ea8  00000f9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.libgcc.prologue 00000038  000011ba  000011ba  000012ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.libgcc.prologue 00000036  00001228  00001228  0000131c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
   8:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
   c:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  10:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  14:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  18:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  1c:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  20:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  24:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  28:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  2c:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_11>
  30:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  34:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  38:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  3c:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  40:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  44:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  48:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  4c:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  50:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  54:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  58:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  5c:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  60:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>
  64:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0a       	sbc	r0, r17
  6c:	80 01       	movw	r16, r0
  6e:	0a 01       	movw	r0, r20
  70:	0c 00       	.word	0x000c	; ????
  72:	13 40       	sbci	r17, 0x03	; 3
  74:	01 0c       	add	r0, r1
  76:	01 14       	cp	r0, r1
  78:	80 01       	movw	r16, r0
  7a:	14 01       	movw	r2, r8
  7c:	18 00       	.word	0x0018	; ????
  7e:	13 42       	sbci	r17, 0x23	; 35

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	e8 e6       	ldi	r30, 0x68	; 104
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	17 c0       	rjmp	.+46     	; 0xc2 <__do_clear_bss+0x8>
  94:	b5 91       	lpm	r27, Z+
  96:	a5 91       	lpm	r26, Z+
  98:	35 91       	lpm	r19, Z+
  9a:	25 91       	lpm	r18, Z+
  9c:	05 91       	lpm	r16, Z+
  9e:	07 fd       	sbrc	r16, 7
  a0:	0c c0       	rjmp	.+24     	; 0xba <__do_clear_bss>
  a2:	95 91       	lpm	r25, Z+
  a4:	85 91       	lpm	r24, Z+
  a6:	ef 01       	movw	r28, r30
  a8:	f9 2f       	mov	r31, r25
  aa:	e8 2f       	mov	r30, r24
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x20>
  b6:	fe 01       	movw	r30, r28
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__do_clear_bss+0x8>

000000ba <__do_clear_bss>:
  ba:	1d 92       	st	X+, r1
  bc:	a2 17       	cp	r26, r18
  be:	b3 07       	cpc	r27, r19
  c0:	e1 f7       	brne	.-8      	; 0xba <__do_clear_bss>
  c2:	e0 38       	cpi	r30, 0x80	; 128
  c4:	f4 07       	cpc	r31, r20
  c6:	31 f7       	brne	.-52     	; 0x94 <__do_copy_data+0x8>
  c8:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  cc:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

Disassembly of section .text:

0000133c <__bad_interrupt>:
    133c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_11:

00000d74 <__vector_11>:


    return 0; 
}

ISR(TIMER1_COMPA_vect){    //This is the interrupt request
 d74:	1f 92       	push	r1
 d76:	0f 92       	push	r0
 d78:	0f b6       	in	r0, 0x3f	; 63
 d7a:	0f 92       	push	r0
 d7c:	11 24       	eor	r1, r1
 d7e:	2f 93       	push	r18
 d80:	3f 93       	push	r19
 d82:	8f 93       	push	r24
 d84:	9f 93       	push	r25
	SEC2++;
 d86:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <SEC2>
 d8a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <SEC2+0x1>
 d8e:	01 96       	adiw	r24, 0x01	; 1
 d90:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <SEC2+0x1>
 d94:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <SEC2>
	
	//backlight off session	
	//#################################
	if (SEC2 == backtime )	{
 d98:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 d9c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 da0:	82 17       	cp	r24, r18
 da2:	93 07       	cpc	r25, r19
 da4:	19 f4       	brne	.+6      	; 0xdac <__vector_11+0x38>
		
			PORTB &= ~(1<<PCINT2); // OFF backlight		
 da6:	85 b1       	in	r24, 0x05	; 5
 da8:	8b 7f       	andi	r24, 0xFB	; 251
 daa:	85 b9       	out	0x05, r24	; 5
	}
	
	//###############################
		
	if (SEC2 == 10)
 dac:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <SEC2>
 db0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <SEC2+0x1>
 db4:	0a 97       	sbiw	r24, 0x0a	; 10
 db6:	09 f0       	breq	.+2      	; 0xdba <__vector_11+0x46>
 db8:	6e c0       	rjmp	.+220    	; 0xe96 <__vector_11+0x122>
	{	
		
		SEC2 = 0;
 dba:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SEC2+0x1>
 dbe:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <SEC2>
		
		//backlight off session
		//#################################
		if (SEC2 == backtime )	{
 dc2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 dc6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 dca:	89 2b       	or	r24, r25
 dcc:	19 f4       	brne	.+6      	; 0xdd4 <__vector_11+0x60>
		
			PORTB &= ~(1<<PCINT2); // OFF backlight
 dce:	85 b1       	in	r24, 0x05	; 5
 dd0:	8b 7f       	andi	r24, 0xFB	; 251
 dd2:	85 b9       	out	0x05, r24	; 5
			}
		
		SEC1 = SEC1 +1;
 dd4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <SEC1>
 dd8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <SEC1+0x1>
 ddc:	01 96       	adiw	r24, 0x01	; 1
 dde:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <SEC1+0x1>
 de2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <SEC1>
			PORTB &= ~(1<<PCINT2); // OFF backlight		
 de6:	85 b1       	in	r24, 0x05	; 5
 de8:	8b 7f       	andi	r24, 0xFB	; 251
 dea:	85 b9       	out	0x05, r24	; 5
	
		if (SEC1 == 6)
 dec:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <SEC1>
 df0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <SEC1+0x1>
 df4:	06 97       	sbiw	r24, 0x06	; 6
 df6:	09 f0       	breq	.+2      	; 0xdfa <__vector_11+0x86>
 df8:	4e c0       	rjmp	.+156    	; 0xe96 <__vector_11+0x122>
		{	
			SEC2 = 0;
 dfa:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SEC2+0x1>
 dfe:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <SEC2>
			SEC1 = 0;
 e02:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <SEC1+0x1>
 e06:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <SEC1>
			MIN2 = MIN2 +1;
 e0a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <MIN2>
 e0e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <MIN2+0x1>
 e12:	01 96       	adiw	r24, 0x01	; 1
 e14:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <MIN2+0x1>
 e18:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <MIN2>
			
			if (MIN2 == 10)
 e1c:	0a 97       	sbiw	r24, 0x0a	; 10
 e1e:	d9 f5       	brne	.+118    	; 0xe96 <__vector_11+0x122>
			{	
				MIN2 = 0;
 e20:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <MIN2+0x1>
 e24:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <MIN2>
				MIN1= MIN1 + 1;
 e28:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <MIN1>
 e2c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <MIN1+0x1>
 e30:	01 96       	adiw	r24, 0x01	; 1
 e32:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <MIN1+0x1>
 e36:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <MIN1>
				
				if (MIN1 == 6)
 e3a:	06 97       	sbiw	r24, 0x06	; 6
 e3c:	61 f5       	brne	.+88     	; 0xe96 <__vector_11+0x122>
				{
					MIN1 =0;
 e3e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <MIN1+0x1>
 e42:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <MIN1>
					MIN2 =0;
					HOU2 = HOU2 +1;
 e46:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <HOU2>
 e4a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <HOU2+0x1>
					
					if (HOU2 ==10 && HOU1 == 1 || HOU1==0)
 e4e:	09 97       	sbiw	r24, 0x09	; 9
 e50:	31 f4       	brne	.+12     	; 0xe5e <__vector_11+0xea>
 e52:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <HOU1>
 e56:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <HOU1+0x1>
 e5a:	01 97       	sbiw	r24, 0x01	; 1
 e5c:	31 f0       	breq	.+12     	; 0xe6a <__vector_11+0xf6>
 e5e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <HOU1>
 e62:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <HOU1+0x1>
 e66:	89 2b       	or	r24, r25
 e68:	71 f4       	brne	.+28     	; 0xe86 <__vector_11+0x112>
					{
						HOU2 = 0;
 e6a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <HOU2+0x1>
 e6e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <HOU2>
						HOU1 = HOU1 +1;
 e72:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <HOU1>
 e76:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <HOU1+0x1>
 e7a:	01 96       	adiw	r24, 0x01	; 1
 e7c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <HOU1+0x1>
 e80:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <HOU1>
 e84:	08 c0       	rjmp	.+16     	; 0xe96 <__vector_11+0x122>
					}
					else{
						HOU1 =0;
 e86:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <HOU1+0x1>
 e8a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <HOU1>
						HOU2 =0;
 e8e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <HOU2+0x1>
 e92:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <HOU2>
					}
				}
			}
		}
	} 
}
 e96:	9f 91       	pop	r25
 e98:	8f 91       	pop	r24
 e9a:	3f 91       	pop	r19
 e9c:	2f 91       	pop	r18
 e9e:	0f 90       	pop	r0
 ea0:	0f be       	out	0x3f, r0	; 63
 ea2:	0f 90       	pop	r0
 ea4:	1f 90       	pop	r1
 ea6:	18 95       	reti

Disassembly of section .text.setbuzzer:

00000ffc <setbuzzer>:
	
	
}


void setbuzzer(int MIN1,int MIN2,int HOU1,int HOU2,int ALMMIN1,int ALMMIN2,int ALMHOU1,int ALMHOU2,int ALMstatus){
     ffc:	8f 92       	push	r8
     ffe:	9f 92       	push	r9
    1000:	af 92       	push	r10
    1002:	bf 92       	push	r11
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
	if(ALMstatus == 1 )
    1018:	8a 94       	dec	r8
    101a:	89 28       	or	r8, r9
    101c:	29 f5       	brne	.+74     	; 0x1068 <setbuzzer+0x6c>
	{
			
			if (MIN1==ALMMIN1 && MIN2==ALMMIN2 && HOU1==ALMHOU1 && HOU2==ALMHOU2)
    101e:	80 17       	cp	r24, r16
    1020:	91 07       	cpc	r25, r17
    1022:	29 f5       	brne	.+74     	; 0x106e <setbuzzer+0x72>
    1024:	6e 15       	cp	r22, r14
    1026:	7f 05       	cpc	r23, r15
    1028:	11 f5       	brne	.+68     	; 0x106e <setbuzzer+0x72>
    102a:	4c 15       	cp	r20, r12
    102c:	5d 05       	cpc	r21, r13
    102e:	f9 f4       	brne	.+62     	; 0x106e <setbuzzer+0x72>
    1030:	2a 15       	cp	r18, r10
    1032:	3b 05       	cpc	r19, r11
    1034:	e1 f4       	brne	.+56     	; 0x106e <setbuzzer+0x72>
			{	
		
				PORTC|=0b00000001;
    1036:	88 b1       	in	r24, 0x08	; 8
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    103c:	2f ef       	ldi	r18, 0xFF	; 255
    103e:	83 ed       	ldi	r24, 0xD3	; 211
    1040:	90 e3       	ldi	r25, 0x30	; 48
    1042:	21 50       	subi	r18, 0x01	; 1
    1044:	80 40       	sbci	r24, 0x00	; 0
    1046:	90 40       	sbci	r25, 0x00	; 0
    1048:	e1 f7       	brne	.-8      	; 0x1042 <setbuzzer+0x46>
    104a:	00 c0       	rjmp	.+0      	; 0x104c <setbuzzer+0x50>
    104c:	00 00       	nop
				_delay_ms(1000);
					
				PORTC &= ~(0b00000001);
    104e:	88 b1       	in	r24, 0x08	; 8
    1050:	8e 7f       	andi	r24, 0xFE	; 254
    1052:	88 b9       	out	0x08, r24	; 8
    1054:	ef ef       	ldi	r30, 0xFF	; 255
    1056:	23 ed       	ldi	r18, 0xD3	; 211
    1058:	80 e3       	ldi	r24, 0x30	; 48
    105a:	e1 50       	subi	r30, 0x01	; 1
    105c:	20 40       	sbci	r18, 0x00	; 0
    105e:	80 40       	sbci	r24, 0x00	; 0
    1060:	e1 f7       	brne	.-8      	; 0x105a <setbuzzer+0x5e>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <setbuzzer+0x68>
    1064:	00 00       	nop
    1066:	03 c0       	rjmp	.+6      	; 0x106e <setbuzzer+0x72>
				
			}
	
	}else{
		
		PORTC&=0b11111110;
    1068:	88 b1       	in	r24, 0x08	; 8
    106a:	8e 7f       	andi	r24, 0xFE	; 254
    106c:	88 b9       	out	0x08, r24	; 8
	}
	
	
	
	
}
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	bf 90       	pop	r11
    1080:	af 90       	pop	r10
    1082:	9f 90       	pop	r9
    1084:	8f 90       	pop	r8
    1086:	08 95       	ret

Disassembly of section .text.writenibble:

00001326 <writenibble>:
/*
  writenibble - Send four bits of the byte "lcdbits" to the LCD
*/
void writenibble(unsigned char lcdbits)
{
PORTD = lcdbits;//&0xF0;
    1326:	8b b9       	out	0x0b, r24	; 11
//PORTB |= 0x02;
PORTB &= ~(0x02);
    1328:	85 b1       	in	r24, 0x05	; 5
    132a:	8d 7f       	andi	r24, 0xFD	; 253
    132c:	85 b9       	out	0x05, r24	; 5
PORTB |= 0x02;
    132e:	85 b1       	in	r24, 0x05	; 5
    1330:	82 60       	ori	r24, 0x02	; 2
    1332:	85 b9       	out	0x05, r24	; 5
PORTB &= ~(0x02);
    1334:	85 b1       	in	r24, 0x05	; 5
    1336:	8d 7f       	andi	r24, 0xFD	; 253
    1338:	85 b9       	out	0x05, r24	; 5
    133a:	08 95       	ret

Disassembly of section .text.writecommand:

00001290 <writecommand>:

/*
  writecommand - Send the 8-bit byte "cmd" to the LCD command register
*/
void writecommand(unsigned char cmd)
{
    1290:	cf 93       	push	r28
    1292:	c8 2f       	mov	r28, r24
	unsigned char temp;

PORTB&=~(0x01);
    1294:	85 b1       	in	r24, 0x05	; 5
    1296:	8e 7f       	andi	r24, 0xFE	; 254
    1298:	85 b9       	out	0x05, r24	; 5
temp=cmd&0xF0;
writenibble(temp);
    129a:	8c 2f       	mov	r24, r28
    129c:	80 7f       	andi	r24, 0xF0	; 240
    129e:	0e 94 93 09 	call	0x1326	; 0x1326 <writenibble>
temp=cmd&0x0F;
temp=temp<<4;
writenibble(temp);
    12a2:	8c 2f       	mov	r24, r28
    12a4:	82 95       	swap	r24
    12a6:	80 7f       	andi	r24, 0xF0	; 240
    12a8:	0e 94 93 09 	call	0x1326	; 0x1326 <writenibble>
    12ac:	8f ed       	ldi	r24, 0xDF	; 223
    12ae:	9e e2       	ldi	r25, 0x2E	; 46
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <writecommand+0x20>
    12b4:	00 c0       	rjmp	.+0      	; 0x12b6 <writecommand+0x26>
    12b6:	00 00       	nop
_delay_ms(3);

}
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

Disassembly of section .text.init_lcd:

00000f64 <init_lcd>:
  init_lcd - Configure the I/O ports and send the initialization commands
*/
void init_lcd()
{
    /* ??? */                   // Set the DDR register bits for ports B and D
	DDRD|=0xF0;
 f64:	8a b1       	in	r24, 0x0a	; 10
 f66:	80 6f       	ori	r24, 0xF0	; 240
 f68:	8a b9       	out	0x0a, r24	; 10
	DDRB|=0x03;
 f6a:	84 b1       	in	r24, 0x04	; 4
 f6c:	83 60       	ori	r24, 0x03	; 3
 f6e:	84 b9       	out	0x04, r24	; 4
 f70:	8f e5       	ldi	r24, 0x5F	; 95
 f72:	9a ee       	ldi	r25, 0xEA	; 234
 f74:	01 97       	sbiw	r24, 0x01	; 1
 f76:	f1 f7       	brne	.-4      	; 0xf74 <init_lcd+0x10>
 f78:	00 c0       	rjmp	.+0      	; 0xf7a <init_lcd+0x16>
 f7a:	00 00       	nop
    _delay_ms(15);              // Delay at least 15ms

	
	writecommand(0x03);
 f7c:	83 e0       	ldi	r24, 0x03	; 3
 f7e:	0e 94 48 09 	call	0x1290	; 0x1290 <writecommand>
 f82:	8f e1       	ldi	r24, 0x1F	; 31
 f84:	9e e4       	ldi	r25, 0x4E	; 78
 f86:	01 97       	sbiw	r24, 0x01	; 1
 f88:	f1 f7       	brne	.-4      	; 0xf86 <init_lcd+0x22>
 f8a:	00 c0       	rjmp	.+0      	; 0xf8c <init_lcd+0x28>
 f8c:	00 00       	nop
    /* ??? */                   // Use writenibble to send 0011
    _delay_ms(5);               // Delay at least 4msec
	writecommand(0x03);
 f8e:	83 e0       	ldi	r24, 0x03	; 3
 f90:	0e 94 48 09 	call	0x1290	; 0x1290 <writecommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 f94:	8f ed       	ldi	r24, 0xDF	; 223
 f96:	91 e0       	ldi	r25, 0x01	; 1
 f98:	01 97       	sbiw	r24, 0x01	; 1
 f9a:	f1 f7       	brne	.-4      	; 0xf98 <init_lcd+0x34>
 f9c:	00 c0       	rjmp	.+0      	; 0xf9e <init_lcd+0x3a>
 f9e:	00 00       	nop
    /* ??? */                   // Use writenibble to send 0011
    _delay_us(120);             // Delay at least 100usec

    /* ??? */                   // Use writenibble to send 0011, no delay needed
	writecommand(0x03);
 fa0:	83 e0       	ldi	r24, 0x03	; 3
 fa2:	0e 94 48 09 	call	0x1290	; 0x1290 <writecommand>

	writecommand(0x02);
 fa6:	82 e0       	ldi	r24, 0x02	; 2
 fa8:	0e 94 48 09 	call	0x1290	; 0x1290 <writecommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 fac:	8f e3       	ldi	r24, 0x3F	; 63
 fae:	9f e1       	ldi	r25, 0x1F	; 31
 fb0:	01 97       	sbiw	r24, 0x01	; 1
 fb2:	f1 f7       	brne	.-4      	; 0xfb0 <init_lcd+0x4c>
 fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <init_lcd+0x52>
 fb6:	00 00       	nop
    /* ??? */                   // Use writenibble to send 0010
    _delay_ms(2);               // Delay at least 2ms
    
    writecommand(0x28);         // Function Set: 4-bit interface, 2 lines
 fb8:	88 e2       	ldi	r24, 0x28	; 40
 fba:	0e 94 48 09 	call	0x1290	; 0x1290 <writecommand>
 fbe:	8f e3       	ldi	r24, 0x3F	; 63
 fc0:	9f e1       	ldi	r25, 0x1F	; 31
 fc2:	01 97       	sbiw	r24, 0x01	; 1
 fc4:	f1 f7       	brne	.-4      	; 0xfc2 <init_lcd+0x5e>
 fc6:	00 c0       	rjmp	.+0      	; 0xfc8 <init_lcd+0x64>
 fc8:	00 00       	nop
_delay_ms(2);
    writecommand(0x0f);         // Display and cursor on
 fca:	8f e0       	ldi	r24, 0x0F	; 15
 fcc:	0e 94 48 09 	call	0x1290	; 0x1290 <writecommand>
 fd0:	9f e7       	ldi	r25, 0x7F	; 127
 fd2:	28 e3       	ldi	r18, 0x38	; 56
 fd4:	81 e0       	ldi	r24, 0x01	; 1
 fd6:	91 50       	subi	r25, 0x01	; 1
 fd8:	20 40       	sbci	r18, 0x00	; 0
 fda:	80 40       	sbci	r24, 0x00	; 0
 fdc:	e1 f7       	brne	.-8      	; 0xfd6 <init_lcd+0x72>
 fde:	00 c0       	rjmp	.+0      	; 0xfe0 <init_lcd+0x7c>
 fe0:	00 00       	nop
_delay_ms(25); 

writecommand(0x01); 
 fe2:	81 e0       	ldi	r24, 0x01	; 1
 fe4:	0e 94 48 09 	call	0x1290	; 0x1290 <writecommand>
 fe8:	9f e7       	ldi	r25, 0x7F	; 127
 fea:	28 e3       	ldi	r18, 0x38	; 56
 fec:	81 e0       	ldi	r24, 0x01	; 1
 fee:	91 50       	subi	r25, 0x01	; 1
 ff0:	20 40       	sbci	r18, 0x00	; 0
 ff2:	80 40       	sbci	r24, 0x00	; 0
 ff4:	e1 f7       	brne	.-8      	; 0xfee <init_lcd+0x8a>
 ff6:	00 c0       	rjmp	.+0      	; 0xff8 <init_lcd+0x94>
 ff8:	00 00       	nop
 ffa:	08 95       	ret

Disassembly of section .text.moveto:

000012e8 <moveto>:

/*
  moveto - Move the cursor to the row (0 or 1) and column (0 to 15) specified
*/
void moveto(unsigned char row, unsigned char col)
{
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	c8 2f       	mov	r28, r24
    12ee:	d6 2f       	mov	r29, r22
    
	if(row==0){
    12f0:	81 11       	cpse	r24, r1
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <moveto+0x14>
		
		writecommand(0x80+col);
    12f4:	80 e8       	ldi	r24, 0x80	; 128
    12f6:	86 0f       	add	r24, r22
    12f8:	0e 94 48 09 	call	0x1290	; 0x1290 <writecommand>
	}
	if(row==1){
    12fc:	c1 30       	cpi	r28, 0x01	; 1
    12fe:	21 f4       	brne	.+8      	; 0x1308 <moveto+0x20>
		
		writecommand(0xc0+col);
    1300:	80 ec       	ldi	r24, 0xC0	; 192
    1302:	8d 0f       	add	r24, r29
    1304:	0e 94 48 09 	call	0x1290	; 0x1290 <writecommand>
	}
	
}
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

Disassembly of section .text.writedata:

000012bc <writedata>:

/*
  writedata - Send the 8-bit byte "dat" to the LCD data register
*/
void writedata(unsigned char dat)
{
    12bc:	cf 93       	push	r28
    12be:	c8 2f       	mov	r28, r24
unsigned char temp;

PORTB|=0x01;
    12c0:	85 b1       	in	r24, 0x05	; 5
    12c2:	81 60       	ori	r24, 0x01	; 1
    12c4:	85 b9       	out	0x05, r24	; 5
temp=dat&0xF0;
writenibble(temp);
    12c6:	8c 2f       	mov	r24, r28
    12c8:	80 7f       	andi	r24, 0xF0	; 240
    12ca:	0e 94 93 09 	call	0x1326	; 0x1326 <writenibble>
temp=dat&0x0F;
temp=temp<<4;
writenibble(temp);
    12ce:	8c 2f       	mov	r24, r28
    12d0:	82 95       	swap	r24
    12d2:	80 7f       	andi	r24, 0xF0	; 240
    12d4:	0e 94 93 09 	call	0x1326	; 0x1326 <writenibble>
    12d8:	8f ed       	ldi	r24, 0xDF	; 223
    12da:	9e e2       	ldi	r25, 0x2E	; 46
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	f1 f7       	brne	.-4      	; 0x12dc <writedata+0x20>
    12e0:	00 c0       	rjmp	.+0      	; 0x12e2 <writedata+0x26>
    12e2:	00 00       	nop
_delay_ms(3);

}
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

Disassembly of section .text.stringout:

0000130e <stringout>:

/*
  stringout - Write the string pointed to by "str" at the current position
*/
void stringout(char *str)
{
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	ec 01       	movw	r28, r24
    
	do{
		
		writedata(*str);
    1314:	89 91       	ld	r24, Y+
    1316:	0e 94 5e 09 	call	0x12bc	; 0x12bc <writedata>
		str++;
		
	}while(*str!= '\0');
    131a:	88 81       	ld	r24, Y
    131c:	81 11       	cpse	r24, r1
    131e:	fa cf       	rjmp	.-12     	; 0x1314 <stringout+0x6>
	
	
}
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

Disassembly of section .text.displayAlmststus:

00001100 <displayAlmststus>:
		}
	} 
}


void displayAlmststus(int ALMstatus){  // print alarm status
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	c0 55       	subi	r28, 0x50	; 80
    110a:	d1 09       	sbc	r29, r1
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
	
	char ALM[80];
	
	if(ALMstatus == 0 )
    1116:	89 2b       	or	r24, r25
    1118:	91 f4       	brne	.+36     	; 0x113e <displayAlmststus+0x3e>
	{	
		moveto(0,13);
    111a:	6d e0       	ldi	r22, 0x0D	; 13
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
		sprintf(ALM, "OFF");
    1122:	24 e0       	ldi	r18, 0x04	; 4
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	44 ed       	ldi	r20, 0xD4	; 212
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	ce 01       	movw	r24, r28
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	0e 94 2f 09 	call	0x125e	; 0x125e <memcpy>
		stringout(ALM);
    1134:	ce 01       	movw	r24, r28
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
    113c:	11 c0       	rjmp	.+34     	; 0x1160 <displayAlmststus+0x60>
		
	}
	else
	{	

		moveto(0,13);
    113e:	6d e0       	ldi	r22, 0x0D	; 13
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
		sprintf(ALM, " ON");
    1146:	24 e0       	ldi	r18, 0x04	; 4
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	48 ed       	ldi	r20, 0xD8	; 216
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	ce 01       	movw	r24, r28
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	0e 94 2f 09 	call	0x125e	; 0x125e <memcpy>
		stringout(ALM);
    1158:	ce 01       	movw	r24, r28
    115a:	01 96       	adiw	r24, 0x01	; 1
    115c:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
		
		
	}
	
	
}
    1160:	c0 5b       	subi	r28, 0xB0	; 176
    1162:	df 4f       	sbci	r29, 0xFF	; 255
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

Disassembly of section .text.main:

00000116 <main>:

int timer;
int backtime=0;


int main(void) {
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	c0 5f       	subi	r28, 0xF0	; 240
 120:	d1 09       	sbc	r29, r1
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61



init_lcd();
 12c:	0e 94 b2 07 	call	0xf64	; 0xf64 <init_lcd>
char str[80];
char str1[80];
char ALM[80];

DDRC |=0b00000001; //set output to buzzer
 130:	87 b1       	in	r24, 0x07	; 7
 132:	81 60       	ori	r24, 0x01	; 1
 134:	87 b9       	out	0x07, r24	; 7

DDRC &= ~(1<<PCINT9);  //set A1 as a  input 
 136:	87 b1       	in	r24, 0x07	; 7
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	87 b9       	out	0x07, r24	; 7

// new add
DDRC &= ~(1<<PCINT10);  //set A2 as a  input
 13c:	87 b1       	in	r24, 0x07	; 7
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	87 b9       	out	0x07, r24	; 7
DDRC &= ~(1<<PCINT11);  //set A3 as a  input
 142:	87 b1       	in	r24, 0x07	; 7
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	87 b9       	out	0x07, r24	; 7
DDRC &= ~(1<<PCINT12);  //set A4 as a  input
 148:	87 b1       	in	r24, 0x07	; 7
 14a:	8f 7e       	andi	r24, 0xEF	; 239
 14c:	87 b9       	out	0x07, r24	; 7
DDRC &= ~(1<<PCINT13);  //set A4 as a  input   //for the IR senser 
 14e:	87 b1       	in	r24, 0x07	; 7
 150:	8f 7d       	andi	r24, 0xDF	; 223
 152:	87 b9       	out	0x07, r24	; 7

// alarm status button and backlight button

DDRB &= ~(1<<PCINT3);  //set 11 as a  input
 154:	84 b1       	in	r24, 0x04	; 4
 156:	87 7f       	andi	r24, 0xF7	; 247
 158:	84 b9       	out	0x04, r24	; 4
DDRB &= ~(1<<PCINT4);  //set 12 as a  input
 15a:	84 b1       	in	r24, 0x04	; 4
 15c:	8f 7e       	andi	r24, 0xEF	; 239
 15e:	84 b9       	out	0x04, r24	; 4

DDRB |= (1<<PCINT2);  //pin 10 output to the Backlight 
 160:	84 b1       	in	r24, 0x04	; 4
 162:	84 60       	ori	r24, 0x04	; 4
 164:	84 b9       	out	0x04, r24	; 4




					DDRD |=0b00000100;
 166:	8a b1       	in	r24, 0x0a	; 10
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	8a b9       	out	0x0a, r24	; 10
					PORTD |=0b00000100;
 16c:	8b b1       	in	r24, 0x0b	; 11
 16e:	84 60       	ori	r24, 0x04	; 4
 170:	8b b9       	out	0x0b, r24	; 11
 172:	2a ea       	ldi	r18, 0xAA	; 170
 174:	36 ee       	ldi	r19, 0xE6	; 230
 176:	86 e9       	ldi	r24, 0x96	; 150
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	30 40       	sbci	r19, 0x00	; 0
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	d9 f7       	brne	.-10     	; 0x17a <main+0x64>
 184:	00 00       	nop
					_delay_ms(10000);
					

TCCR1B=(1<<WGM12);
 186:	e1 e8       	ldi	r30, 0x81	; 129
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	80 83       	st	Z, r24
OCR1A = 15625;
 18e:	89 e0       	ldi	r24, 0x09	; 9
 190:	9d e3       	ldi	r25, 0x3D	; 61
 192:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 196:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
TIMSK1=(1<<OCIE1A);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

sei();
 1a0:	78 94       	sei

TCCR1B |=(1<<CS12)|(1<<CS10);
 1a2:	80 81       	ld	r24, Z
 1a4:	85 60       	ori	r24, 0x05	; 5
 1a6:	80 83       	st	Z, r24


sprintf(str1, "IBRAR");
 1a8:	26 e0       	ldi	r18, 0x06	; 6
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	4c ed       	ldi	r20, 0xDC	; 220
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	ce 01       	movw	r24, r28
 1b4:	8f 5a       	subi	r24, 0xAF	; 175
 1b6:	9f 4f       	sbci	r25, 0xFF	; 255
 1b8:	0e 94 2f 09 	call	0x125e	; 0x125e <memcpy>
stringout(str1);
 1bc:	ce 01       	movw	r24, r28
 1be:	8f 5a       	subi	r24, 0xAF	; 175
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
 1c6:	2a ea       	ldi	r18, 0xAA	; 170
 1c8:	36 ee       	ldi	r19, 0xE6	; 230
 1ca:	86 e9       	ldi	r24, 0x96	; 150
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	30 40       	sbci	r19, 0x00	; 0
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	d9 f7       	brne	.-10     	; 0x1ce <main+0xb8>
 1d8:	00 00       	nop
	
while (1) {               
	
	// Loop forever
	
	moveto(0,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
	
	sprintf(str, "%d%d:%d%d:%d%d",HOU1,HOU2,MIN1,MIN2,SEC1,SEC2);//send data to display
 1e2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <SEC2+0x1>
 1e6:	8f 93       	push	r24
 1e8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <SEC2>
 1ec:	8f 93       	push	r24
 1ee:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <SEC1+0x1>
 1f2:	8f 93       	push	r24
 1f4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <SEC1>
 1f8:	8f 93       	push	r24
 1fa:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <MIN2+0x1>
 1fe:	8f 93       	push	r24
 200:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <MIN2>
 204:	8f 93       	push	r24
 206:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <MIN1+0x1>
 20a:	8f 93       	push	r24
 20c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <MIN1>
 210:	8f 93       	push	r24
 212:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <HOU2+0x1>
 216:	8f 93       	push	r24
 218:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <HOU2>
 21c:	8f 93       	push	r24
 21e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <HOU1+0x1>
 222:	8f 93       	push	r24
 224:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <HOU1>
 228:	8f 93       	push	r24
 22a:	82 ee       	ldi	r24, 0xE2	; 226
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	a0 e0       	ldi	r26, 0x00	; 0
 230:	af 93       	push	r26
 232:	9f 93       	push	r25
 234:	8f 93       	push	r24
 236:	8e 01       	movw	r16, r28
 238:	0f 5f       	subi	r16, 0xFF	; 255
 23a:	1f 4f       	sbci	r17, 0xFF	; 255
 23c:	1f 93       	push	r17
 23e:	0f 93       	push	r16
 240:	0e 94 ba 08 	call	0x1174	; 0x1174 <sprintf>
	stringout(str);
 244:	c8 01       	movw	r24, r16
 246:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
	moveto(0,9);
 24a:	69 e0       	ldi	r22, 0x09	; 9
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
	sprintf(ALM, "ALM:");
 252:	25 e0       	ldi	r18, 0x05	; 5
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	41 ef       	ldi	r20, 0xF1	; 241
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	ce 01       	movw	r24, r28
 25e:	8f 55       	subi	r24, 0x5F	; 95
 260:	9f 4f       	sbci	r25, 0xFF	; 255
 262:	0e 94 2f 09 	call	0x125e	; 0x125e <memcpy>
	stringout(ALM);
 266:	ce 01       	movw	r24, r28
 268:	8f 55       	subi	r24, 0x5F	; 95
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
			
			
			if((PINC & 0x02)== 0x02 ) //If switch is pressed change min of Clock
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	31 9b       	sbis	0x06, 1	; 6
 27c:	2b c0       	rjmp	.+86     	; 0x2d4 <main+0x1be>
			
			{			
				MIN2++; 
 27e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <MIN2>
 282:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <MIN2+0x1>
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <MIN2+0x1>
 28c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <MIN2>
 290:	3f ef       	ldi	r19, 0xFF	; 255
 292:	8b e7       	ldi	r24, 0x7B	; 123
 294:	92 e9       	ldi	r25, 0x92	; 146
 296:	31 50       	subi	r19, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x180>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x18a>
 2a0:	00 00       	nop
				
				_delay_ms(3000); 
		
				if (MIN2 == 10)
 2a2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <MIN2>
 2a6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <MIN2+0x1>
 2aa:	0a 97       	sbiw	r24, 0x0a	; 10
 2ac:	99 f4       	brne	.+38     	; 0x2d4 <main+0x1be>
				{
					MIN2 = 0;
 2ae:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <MIN2+0x1>
 2b2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <MIN2>
					MIN1= MIN1 + 1;
 2b6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <MIN1>
 2ba:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <MIN1+0x1>
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <MIN1+0x1>
 2c4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <MIN1>
					
					if (MIN1 == 6)
 2c8:	06 97       	sbiw	r24, 0x06	; 6
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <main+0x1be>
					{
						MIN1 =0;
 2cc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <MIN1+0x1>
 2d0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <MIN1>
				}
				
			}
			
			
			if((PINC & 0x04)== 0x04 ) //If switch is pressed change hou of CLock
 2d4:	32 9b       	sbis	0x06, 2	; 6
 2d6:	39 c0       	rjmp	.+114    	; 0x34a <main+0x234>
			
			{			
				HOU2=HOU2+1;
 2d8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <HOU2>
 2dc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <HOU2+0x1>
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <HOU2+0x1>
 2e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <HOU2>
 2ea:	2f ef       	ldi	r18, 0xFF	; 255
 2ec:	3b e7       	ldi	r19, 0x7B	; 123
 2ee:	82 e9       	ldi	r24, 0x92	; 146
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	30 40       	sbci	r19, 0x00	; 0
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0x1da>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x1e4>
 2fa:	00 00       	nop
				
			
				_delay_ms(3000);
			
				
				if (HOU1 ==2 && HOU2 == 4 )
 2fc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <HOU1>
 300:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <HOU1+0x1>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	91 05       	cpc	r25, r1
 308:	81 f4       	brne	.+32     	; 0x32a <main+0x214>
 30a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <HOU2>
 30e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <HOU2+0x1>
 312:	24 30       	cpi	r18, 0x04	; 4
 314:	31 05       	cpc	r19, r1
 316:	49 f4       	brne	.+18     	; 0x32a <main+0x214>
				{
					HOU2 = 0;
 318:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <HOU2+0x1>
 31c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <HOU2>
					HOU1 = 0;
 320:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <HOU1+0x1>
 324:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <HOU1>
 328:	10 c0       	rjmp	.+32     	; 0x34a <main+0x234>
				
				}
				else {
			
					
					if (HOU2==10)
 32a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <HOU2>
 32e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <HOU2+0x1>
 332:	2a 30       	cpi	r18, 0x0A	; 10
 334:	31 05       	cpc	r19, r1
 336:	49 f4       	brne	.+18     	; 0x34a <main+0x234>
					{	
						HOU2=0;
 338:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <HOU2+0x1>
 33c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <HOU2>
						HOU1=HOU1+1;
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <HOU1+0x1>
 346:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <HOU1>
			}

			
			// set the alarm mode
			
			if((PINC & 0x02)== 0x02 && (PINC & 0x04)== 0x04 )
 34a:	31 9b       	sbis	0x06, 1	; 6
 34c:	42 c0       	rjmp	.+132    	; 0x3d2 <main+0x2bc>
 34e:	32 9b       	sbis	0x06, 2	; 6
 350:	40 c0       	rjmp	.+128    	; 0x3d2 <main+0x2bc>
			
			{			
				moveto(1,0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
				
				sprintf(str1, "%d%d:%d%d:ALARM",ALMHOU1,ALMHOU2,ALMMIN1,ALMMIN2);//send ALM data to display
 35a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ALMMIN2+0x1>
 35e:	8f 93       	push	r24
 360:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ALMMIN2>
 364:	8f 93       	push	r24
 366:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ALMMIN1+0x1>
 36a:	8f 93       	push	r24
 36c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ALMMIN1>
 370:	8f 93       	push	r24
 372:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ALMHOU2+0x1>
 376:	8f 93       	push	r24
 378:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ALMHOU2>
 37c:	8f 93       	push	r24
 37e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ALMHOU1+0x1>
 382:	8f 93       	push	r24
 384:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ALMHOU1>
 388:	8f 93       	push	r24
 38a:	86 ef       	ldi	r24, 0xF6	; 246
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	a0 e0       	ldi	r26, 0x00	; 0
 390:	af 93       	push	r26
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	8e 01       	movw	r16, r28
 398:	0f 5a       	subi	r16, 0xAF	; 175
 39a:	1f 4f       	sbci	r17, 0xFF	; 255
 39c:	1f 93       	push	r17
 39e:	0f 93       	push	r16
 3a0:	0e 94 ba 08 	call	0x1174	; 0x1174 <sprintf>
				stringout(str1);
 3a4:	c8 01       	movw	r24, r16
 3a6:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
				ALMstatus =1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ALMstatus+0x1>
 3b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ALMstatus>
 3b6:	9f ef       	ldi	r25, 0xFF	; 255
 3b8:	2b e7       	ldi	r18, 0x7B	; 123
 3ba:	32 e9       	ldi	r19, 0x92	; 146
 3bc:	91 50       	subi	r25, 0x01	; 1
 3be:	20 40       	sbci	r18, 0x00	; 0
 3c0:	30 40       	sbci	r19, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <main+0x2a6>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0x2b0>
 3c6:	00 00       	nop
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
			}
			
			
				//	IR senser ditect
			
			if((PINC & 0b00100000)== 0b00100000 )
 3d2:	35 9b       	sbis	0x06, 5	; 6
 3d4:	1d c0       	rjmp	.+58     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
				{
					
					backtime=SEC2;
 3d6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <SEC2>
 3da:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <SEC2+0x1>
 3de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e6:	9f ef       	ldi	r25, 0xFF	; 255
 3e8:	24 e3       	ldi	r18, 0x34	; 52
 3ea:	3c e0       	ldi	r19, 0x0C	; 12
 3ec:	91 50       	subi	r25, 0x01	; 1
 3ee:	20 40       	sbci	r18, 0x00	; 0
 3f0:	30 40       	sbci	r19, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0x2d6>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0x2e0>
 3f6:	00 00       	nop
					{
						backtime-5;
					}
					
					_delay_ms(250);
					PORTB |= (1<<PCINT2); // ON backlight
 3f8:	85 b1       	in	r24, 0x05	; 5
 3fa:	84 60       	ori	r24, 0x04	; 4
 3fc:	85 b9       	out	0x05, r24	; 5
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	94 e3       	ldi	r25, 0x34	; 52
 402:	2c e0       	ldi	r18, 0x0C	; 12
 404:	81 50       	subi	r24, 0x01	; 1
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	20 40       	sbci	r18, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
				
				
				}		
			
			
			if((PINC & 0x08)== 0x08 ) //If switch is pressed change ALMmin 
 410:	33 9b       	sbis	0x06, 3	; 6
 412:	c7 c0       	rjmp	.+398    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
			
			{			
				ALMMIN2++;
 414:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ALMMIN2>
 418:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ALMMIN2+0x1>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ALMMIN2+0x1>
 422:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ALMMIN2>
				ALMstatus=1;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ALMstatus+0x1>
 42e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ALMstatus>
 432:	3f ef       	ldi	r19, 0xFF	; 255
 434:	8b e7       	ldi	r24, 0x7B	; 123
 436:	92 e9       	ldi	r25, 0x92	; 146
 438:	31 50       	subi	r19, 0x01	; 1
 43a:	80 40       	sbci	r24, 0x00	; 0
 43c:	90 40       	sbci	r25, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 442:	00 00       	nop
			
				_delay_ms(3000);
			
				moveto(1,0);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
				
				sprintf(str1, "%d%d:%d%d:ALARM",ALMHOU1,ALMHOU2,ALMMIN1,ALMMIN2);//send ALM data to display
 44c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ALMMIN2+0x1>
 450:	8f 93       	push	r24
 452:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ALMMIN2>
 456:	8f 93       	push	r24
 458:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ALMMIN1+0x1>
 45c:	8f 93       	push	r24
 45e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ALMMIN1>
 462:	8f 93       	push	r24
 464:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ALMHOU2+0x1>
 468:	8f 93       	push	r24
 46a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ALMHOU2>
 46e:	8f 93       	push	r24
 470:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ALMHOU1+0x1>
 474:	8f 93       	push	r24
 476:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ALMHOU1>
 47a:	8f 93       	push	r24
 47c:	86 ef       	ldi	r24, 0xF6	; 246
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	a0 e0       	ldi	r26, 0x00	; 0
 482:	af 93       	push	r26
 484:	9f 93       	push	r25
 486:	8f 93       	push	r24
 488:	8e 01       	movw	r16, r28
 48a:	0f 5a       	subi	r16, 0xAF	; 175
 48c:	1f 4f       	sbci	r17, 0xFF	; 255
 48e:	1f 93       	push	r17
 490:	0f 93       	push	r16
 492:	0e 94 ba 08 	call	0x1174	; 0x1174 <sprintf>
				stringout(str1);
 496:	c8 01       	movw	r24, r16
 498:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
				
				if (ALMMIN2 == 10)
 49c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ALMMIN2>
 4a0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ALMMIN2+0x1>
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	0a 97       	sbiw	r24, 0x0a	; 10
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b2:	77 c0       	rjmp	.+238    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
				{
					ALMMIN2 = 0;
 4b4:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ALMMIN2+0x1>
 4b8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ALMMIN2>
					ALMMIN1= ALMMIN1 + 1;
 4bc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ALMMIN1>
 4c0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ALMMIN1+0x1>
 4c4:	01 96       	adiw	r24, 0x01	; 1
 4c6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ALMMIN1+0x1>
 4ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ALMMIN1>
					moveto(1,0);
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
					
					sprintf(str1, "%d%d:%d%d:ALARM",ALMHOU1,ALMHOU2,ALMMIN1,ALMMIN2);//send ALM data to display
 4d6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ALMMIN2+0x1>
 4da:	8f 93       	push	r24
 4dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ALMMIN2>
 4e0:	8f 93       	push	r24
 4e2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ALMMIN1+0x1>
 4e6:	8f 93       	push	r24
 4e8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ALMMIN1>
 4ec:	8f 93       	push	r24
 4ee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ALMHOU2+0x1>
 4f2:	8f 93       	push	r24
 4f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ALMHOU2>
 4f8:	8f 93       	push	r24
 4fa:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ALMHOU1+0x1>
 4fe:	8f 93       	push	r24
 500:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ALMHOU1>
 504:	8f 93       	push	r24
 506:	86 ef       	ldi	r24, 0xF6	; 246
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	a0 e0       	ldi	r26, 0x00	; 0
 50c:	af 93       	push	r26
 50e:	9f 93       	push	r25
 510:	8f 93       	push	r24
 512:	1f 93       	push	r17
 514:	0f 93       	push	r16
 516:	0e 94 ba 08 	call	0x1174	; 0x1174 <sprintf>
					stringout(str1);
 51a:	c8 01       	movw	r24, r16
 51c:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
					
					if (ALMMIN1 == 6)
 520:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ALMMIN1>
 524:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ALMMIN1+0x1>
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	f8 94       	cli
 52c:	de bf       	out	0x3e, r29	; 62
 52e:	0f be       	out	0x3f, r0	; 63
 530:	cd bf       	out	0x3d, r28	; 61
 532:	06 97       	sbiw	r24, 0x06	; 6
 534:	b1 f5       	brne	.+108    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
					{
						ALMMIN1 =0;
 536:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ALMMIN1+0x1>
 53a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ALMMIN1>
						ALMMIN2 =0;
 53e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ALMMIN2+0x1>
 542:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ALMMIN2>
						moveto(1,0);
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
						
						sprintf(str1, "%d%d:%d%d:ALARM",ALMHOU1,ALMHOU2,ALMMIN1,ALMMIN2);//send ALM data to display
 54e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ALMMIN2+0x1>
 552:	8f 93       	push	r24
 554:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ALMMIN2>
 558:	8f 93       	push	r24
 55a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ALMMIN1+0x1>
 55e:	8f 93       	push	r24
 560:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ALMMIN1>
 564:	8f 93       	push	r24
 566:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ALMHOU2+0x1>
 56a:	8f 93       	push	r24
 56c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ALMHOU2>
 570:	8f 93       	push	r24
 572:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ALMHOU1+0x1>
 576:	8f 93       	push	r24
 578:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ALMHOU1>
 57c:	8f 93       	push	r24
 57e:	86 ef       	ldi	r24, 0xF6	; 246
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	a0 e0       	ldi	r26, 0x00	; 0
 584:	af 93       	push	r26
 586:	9f 93       	push	r25
 588:	8f 93       	push	r24
 58a:	1f 93       	push	r17
 58c:	0f 93       	push	r16
 58e:	0e 94 ba 08 	call	0x1174	; 0x1174 <sprintf>
						stringout(str1);
 592:	c8 01       	movw	r24, r16
 594:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	f8 94       	cli
 59c:	de bf       	out	0x3e, r29	; 62
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	cd bf       	out	0x3d, r28	; 61
				}
				
			}
			
			
			if((PINC & 0x10)== 0x10 ) //If switch is pressed change ALMHOU
 5a2:	34 9b       	sbis	0x06, 4	; 6
 5a4:	ce c0       	rjmp	.+412    	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
			
			{			
				ALMHOU2++;
 5a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ALMHOU2>
 5aa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ALMHOU2+0x1>
 5ae:	01 96       	adiw	r24, 0x01	; 1
 5b0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ALMHOU2+0x1>
 5b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ALMHOU2>
				ALMstatus=1;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ALMstatus+0x1>
 5c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ALMstatus>
 5c4:	9f ef       	ldi	r25, 0xFF	; 255
 5c6:	2b e7       	ldi	r18, 0x7B	; 123
 5c8:	32 e9       	ldi	r19, 0x92	; 146
 5ca:	91 50       	subi	r25, 0x01	; 1
 5cc:	20 40       	sbci	r18, 0x00	; 0
 5ce:	30 40       	sbci	r19, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
 5d4:	00 00       	nop
				
				_delay_ms(3000);
				
				
				moveto(1,0);
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
				
				sprintf(str1, "%d%d:%d%d:ALARM",ALMHOU1,ALMHOU2,ALMMIN1,ALMMIN2);//send ALM data to display
 5dc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ALMMIN2+0x1>
 5e0:	8f 93       	push	r24
 5e2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ALMMIN2>
 5e6:	8f 93       	push	r24
 5e8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ALMMIN1+0x1>
 5ec:	8f 93       	push	r24
 5ee:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ALMMIN1>
 5f2:	8f 93       	push	r24
 5f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ALMHOU2+0x1>
 5f8:	8f 93       	push	r24
 5fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ALMHOU2>
 5fe:	8f 93       	push	r24
 600:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ALMHOU1+0x1>
 604:	8f 93       	push	r24
 606:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ALMHOU1>
 60a:	8f 93       	push	r24
 60c:	86 ef       	ldi	r24, 0xF6	; 246
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	a0 e0       	ldi	r26, 0x00	; 0
 612:	af 93       	push	r26
 614:	9f 93       	push	r25
 616:	8f 93       	push	r24
 618:	8e 01       	movw	r16, r28
 61a:	0f 5a       	subi	r16, 0xAF	; 175
 61c:	1f 4f       	sbci	r17, 0xFF	; 255
 61e:	1f 93       	push	r17
 620:	0f 93       	push	r16
 622:	0e 94 ba 08 	call	0x1174	; 0x1174 <sprintf>
				stringout(str1);
 626:	c8 01       	movw	r24, r16
 628:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
				
				if (ALMHOU1 ==2 && ALMHOU2 == 4 )
 62c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ALMHOU1>
 630:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ALMHOU1+0x1>
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	f8 94       	cli
 638:	de bf       	out	0x3e, r29	; 62
 63a:	0f be       	out	0x3f, r0	; 63
 63c:	cd bf       	out	0x3d, r28	; 61
 63e:	82 30       	cpi	r24, 0x02	; 2
 640:	91 05       	cpc	r25, r1
 642:	f1 f5       	brne	.+124    	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
 644:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <ALMHOU2>
 648:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <ALMHOU2+0x1>
 64c:	24 30       	cpi	r18, 0x04	; 4
 64e:	31 05       	cpc	r19, r1
 650:	b9 f5       	brne	.+110    	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
				{
					ALMHOU2 = 0;
 652:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ALMHOU2+0x1>
 656:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ALMHOU2>
					ALMHOU1 = 0;
 65a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <ALMHOU1+0x1>
 65e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <ALMHOU1>
					moveto(1,0);
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
					
					sprintf(str1, "%d%d:%d%d:ALARM",ALMHOU1,ALMHOU2,ALMMIN1,ALMMIN2);//send ALM data to display
 66a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ALMMIN2+0x1>
 66e:	8f 93       	push	r24
 670:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ALMMIN2>
 674:	8f 93       	push	r24
 676:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ALMMIN1+0x1>
 67a:	8f 93       	push	r24
 67c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ALMMIN1>
 680:	8f 93       	push	r24
 682:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ALMHOU2+0x1>
 686:	8f 93       	push	r24
 688:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ALMHOU2>
 68c:	8f 93       	push	r24
 68e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ALMHOU1+0x1>
 692:	8f 93       	push	r24
 694:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ALMHOU1>
 698:	8f 93       	push	r24
 69a:	86 ef       	ldi	r24, 0xF6	; 246
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	a0 e0       	ldi	r26, 0x00	; 0
 6a0:	af 93       	push	r26
 6a2:	9f 93       	push	r25
 6a4:	8f 93       	push	r24
 6a6:	1f 93       	push	r17
 6a8:	0f 93       	push	r16
 6aa:	0e 94 ba 08 	call	0x1174	; 0x1174 <sprintf>
					stringout(str1);
 6ae:	c8 01       	movw	r24, r16
 6b0:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	f8 94       	cli
 6b8:	de bf       	out	0x3e, r29	; 62
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	cd bf       	out	0x3d, r28	; 61
 6be:	41 c0       	rjmp	.+130    	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
				}
				else {
					
					
					if (ALMHOU2==10)
 6c0:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <ALMHOU2>
 6c4:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <ALMHOU2+0x1>
 6c8:	2a 30       	cpi	r18, 0x0A	; 10
 6ca:	31 05       	cpc	r19, r1
 6cc:	d1 f5       	brne	.+116    	; 0x742 <__EEPROM_REGION_LENGTH__+0x342>
					{
						ALMHOU2=0;
 6ce:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ALMHOU2+0x1>
 6d2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ALMHOU2>
						ALMHOU1=ALMHOU1+1;
 6d6:	01 96       	adiw	r24, 0x01	; 1
 6d8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ALMHOU1+0x1>
 6dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ALMHOU1>
						moveto(1,0);
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
						
						sprintf(str1, "%d%d:%d%d:ALARM",ALMHOU1,ALMHOU2,ALMMIN1,ALMMIN2);//send ALM data to display
 6e8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ALMMIN2+0x1>
 6ec:	8f 93       	push	r24
 6ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ALMMIN2>
 6f2:	8f 93       	push	r24
 6f4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ALMMIN1+0x1>
 6f8:	8f 93       	push	r24
 6fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ALMMIN1>
 6fe:	8f 93       	push	r24
 700:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ALMHOU2+0x1>
 704:	8f 93       	push	r24
 706:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ALMHOU2>
 70a:	8f 93       	push	r24
 70c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ALMHOU1+0x1>
 710:	8f 93       	push	r24
 712:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ALMHOU1>
 716:	8f 93       	push	r24
 718:	86 ef       	ldi	r24, 0xF6	; 246
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	a0 e0       	ldi	r26, 0x00	; 0
 71e:	af 93       	push	r26
 720:	9f 93       	push	r25
 722:	8f 93       	push	r24
 724:	8e 01       	movw	r16, r28
 726:	0f 5a       	subi	r16, 0xAF	; 175
 728:	1f 4f       	sbci	r17, 0xFF	; 255
 72a:	1f 93       	push	r17
 72c:	0f 93       	push	r16
 72e:	0e 94 ba 08 	call	0x1174	; 0x1174 <sprintf>
						stringout(str1);
 732:	c8 01       	movw	r24, r16
 734:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	f8 94       	cli
 73c:	de bf       	out	0x3e, r29	; 62
 73e:	0f be       	out	0x3f, r0	; 63
 740:	cd bf       	out	0x3d, r28	; 61
				}
				
			}
			
			
				if((PINC & 0x08)== 0x08 && (PINC & 0x10)== 0x10 ) //If switch is pressed backlight on for 5 seconds	
 742:	33 9b       	sbis	0x06, 3	; 6
 744:	0e c0       	rjmp	.+28     	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
 746:	34 9b       	sbis	0x06, 4	; 6
 748:	0c c0       	rjmp	.+24     	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
 74a:	3f ef       	ldi	r19, 0xFF	; 255
 74c:	84 e3       	ldi	r24, 0x34	; 52
 74e:	9c e0       	ldi	r25, 0x0C	; 12
 750:	31 50       	subi	r19, 0x01	; 1
 752:	80 40       	sbci	r24, 0x00	; 0
 754:	90 40       	sbci	r25, 0x00	; 0
 756:	e1 f7       	brne	.-8      	; 0x750 <__EEPROM_REGION_LENGTH__+0x350>
 758:	00 c0       	rjmp	.+0      	; 0x75a <__EEPROM_REGION_LENGTH__+0x35a>
 75a:	00 00       	nop
						{
							backtime-5;
						}
				
						_delay_ms(250);
						PORTB |= (1<<PCINT2); // ON backlight
 75c:	85 b1       	in	r24, 0x05	; 5
 75e:	84 60       	ori	r24, 0x04	; 4
 760:	85 b9       	out	0x05, r24	; 5
 762:	2f ef       	ldi	r18, 0xFF	; 255
 764:	31 ee       	ldi	r19, 0xE1	; 225
 766:	84 e0       	ldi	r24, 0x04	; 4
 768:	21 50       	subi	r18, 0x01	; 1
 76a:	30 40       	sbci	r19, 0x00	; 0
 76c:	80 40       	sbci	r24, 0x00	; 0
 76e:	e1 f7       	brne	.-8      	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
 770:	00 c0       	rjmp	.+0      	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
 772:	00 00       	nop
			
			
				
				_delay_ms(100);
				
				if((PINB & 0x10)== 0x10 ) 			
 774:	1c 9b       	sbis	0x03, 4	; 3
 776:	a0 c0       	rjmp	.+320    	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
				{		
					
					if (ALMstatus==0)
 778:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ALMstatus>
 77c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ALMstatus+0x1>
 780:	89 2b       	or	r24, r25
 782:	b1 f5       	brne	.+108    	; 0x7f0 <__EEPROM_REGION_LENGTH__+0x3f0>
					{
						ALMstatus=1;
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ALMstatus+0x1>
 78c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ALMstatus>
 790:	9f ef       	ldi	r25, 0xFF	; 255
 792:	2b e7       	ldi	r18, 0x7B	; 123
 794:	32 e9       	ldi	r19, 0x92	; 146
 796:	91 50       	subi	r25, 0x01	; 1
 798:	20 40       	sbci	r18, 0x00	; 0
 79a:	30 40       	sbci	r19, 0x00	; 0
 79c:	e1 f7       	brne	.-8      	; 0x796 <__EEPROM_REGION_LENGTH__+0x396>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <__EEPROM_REGION_LENGTH__+0x3a0>
 7a0:	00 00       	nop
						
						_delay_ms(3000);
						
						setbuzzer(MIN1,MIN2,HOU1,HOU2,ALMMIN1,ALMMIN2,ALMHOU1,ALMHOU2,ALMstatus);
 7a2:	80 90 02 01 	lds	r8, 0x0102	; 0x800102 <ALMstatus>
 7a6:	90 90 03 01 	lds	r9, 0x0103	; 0x800103 <ALMstatus+0x1>
 7aa:	a0 90 06 01 	lds	r10, 0x0106	; 0x800106 <ALMHOU2>
 7ae:	b0 90 07 01 	lds	r11, 0x0107	; 0x800107 <ALMHOU2+0x1>
 7b2:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <ALMHOU1>
 7b6:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <ALMHOU1+0x1>
 7ba:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <ALMMIN2>
 7be:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <ALMMIN2+0x1>
 7c2:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <ALMMIN1>
 7c6:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <ALMMIN1+0x1>
 7ca:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <HOU2>
 7ce:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <HOU2+0x1>
 7d2:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <HOU1>
 7d6:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <HOU1+0x1>
 7da:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MIN2>
 7de:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MIN2+0x1>
 7e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <MIN1>
 7e6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <MIN1+0x1>
 7ea:	0e 94 fe 07 	call	0xffc	; 0xffc <setbuzzer>
 7ee:	64 c0       	rjmp	.+200    	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
						
					}
					else
					{
						ALMstatus=0;	
 7f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <ALMstatus+0x1>
 7f4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <ALMstatus>
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
 7fa:	9b e7       	ldi	r25, 0x7B	; 123
 7fc:	22 e9       	ldi	r18, 0x92	; 146
 7fe:	81 50       	subi	r24, 0x01	; 1
 800:	90 40       	sbci	r25, 0x00	; 0
 802:	20 40       	sbci	r18, 0x00	; 0
 804:	e1 f7       	brne	.-8      	; 0x7fe <__EEPROM_REGION_LENGTH__+0x3fe>
 806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 808:	00 00       	nop
						
						_delay_ms(3000);
						
						setbuzzer(MIN1,MIN2,HOU1,HOU2,ALMMIN1,ALMMIN2,ALMHOU1,ALMHOU2,ALMstatus);
 80a:	80 90 02 01 	lds	r8, 0x0102	; 0x800102 <ALMstatus>
 80e:	90 90 03 01 	lds	r9, 0x0103	; 0x800103 <ALMstatus+0x1>
 812:	a0 90 06 01 	lds	r10, 0x0106	; 0x800106 <ALMHOU2>
 816:	b0 90 07 01 	lds	r11, 0x0107	; 0x800107 <ALMHOU2+0x1>
 81a:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <ALMHOU1>
 81e:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <ALMHOU1+0x1>
 822:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <ALMMIN2>
 826:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <ALMMIN2+0x1>
 82a:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <ALMMIN1>
 82e:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <ALMMIN1+0x1>
 832:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <HOU2>
 836:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <HOU2+0x1>
 83a:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <HOU1>
 83e:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <HOU1+0x1>
 842:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MIN2>
 846:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MIN2+0x1>
 84a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <MIN1>
 84e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <MIN1+0x1>
 852:	0e 94 fe 07 	call	0xffc	; 0xffc <setbuzzer>
						moveto(1,0);
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
						
						sprintf(str1, "              ",ALMHOU1,ALMHOU2,ALMMIN1,ALMMIN2);//send ALM data to display
 85e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ALMMIN2+0x1>
 862:	8f 93       	push	r24
 864:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ALMMIN2>
 868:	8f 93       	push	r24
 86a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ALMMIN1+0x1>
 86e:	8f 93       	push	r24
 870:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ALMMIN1>
 874:	8f 93       	push	r24
 876:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ALMHOU2+0x1>
 87a:	8f 93       	push	r24
 87c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ALMHOU2>
 880:	8f 93       	push	r24
 882:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ALMHOU1+0x1>
 886:	8f 93       	push	r24
 888:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ALMHOU1>
 88c:	8f 93       	push	r24
 88e:	86 e0       	ldi	r24, 0x06	; 6
 890:	91 e0       	ldi	r25, 0x01	; 1
 892:	a0 e0       	ldi	r26, 0x00	; 0
 894:	af 93       	push	r26
 896:	9f 93       	push	r25
 898:	8f 93       	push	r24
 89a:	8e 01       	movw	r16, r28
 89c:	0f 5a       	subi	r16, 0xAF	; 175
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	1f 93       	push	r17
 8a2:	0f 93       	push	r16
 8a4:	0e 94 ba 08 	call	0x1174	; 0x1174 <sprintf>
						stringout(str1);
 8a8:	c8 01       	movw	r24, r16
 8aa:	0e 94 87 09 	call	0x130e	; 0x130e <stringout>
 8ae:	0f b6       	in	r0, 0x3f	; 63
 8b0:	f8 94       	cli
 8b2:	de bf       	out	0x3e, r29	; 62
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	cd bf       	out	0x3d, r28	; 61
			
			
	
	
	
	displayAlmststus(ALMstatus);  // calling the alarm function
 8b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ALMstatus>
 8bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ALMstatus+0x1>
 8c0:	0e 94 80 08 	call	0x1100	; 0x1100 <displayAlmststus>
 8c4:	9f ef       	ldi	r25, 0xFF	; 255
 8c6:	23 ec       	ldi	r18, 0xC3	; 195
 8c8:	39 e0       	ldi	r19, 0x09	; 9
 8ca:	91 50       	subi	r25, 0x01	; 1
 8cc:	20 40       	sbci	r18, 0x00	; 0
 8ce:	30 40       	sbci	r19, 0x00	; 0
 8d0:	e1 f7       	brne	.-8      	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 8d4:	00 00       	nop
	_delay_ms(200);
	moveto(0,14);
 8d6:	6e e0       	ldi	r22, 0x0E	; 14
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	0e 94 74 09 	call	0x12e8	; 0x12e8 <moveto>
	
	setbuzzer(MIN1,MIN2,HOU1,HOU2,ALMMIN1,ALMMIN2,ALMHOU1,ALMHOU2,ALMstatus);
 8de:	80 90 02 01 	lds	r8, 0x0102	; 0x800102 <ALMstatus>
 8e2:	90 90 03 01 	lds	r9, 0x0103	; 0x800103 <ALMstatus+0x1>
 8e6:	a0 90 06 01 	lds	r10, 0x0106	; 0x800106 <ALMHOU2>
 8ea:	b0 90 07 01 	lds	r11, 0x0107	; 0x800107 <ALMHOU2+0x1>
 8ee:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <ALMHOU1>
 8f2:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <ALMHOU1+0x1>
 8f6:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <ALMMIN2>
 8fa:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <ALMMIN2+0x1>
 8fe:	00 91 08 01 	lds	r16, 0x0108	; 0x800108 <ALMMIN1>
 902:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <ALMMIN1+0x1>
 906:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <HOU2>
 90a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <HOU2+0x1>
 90e:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <HOU1>
 912:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <HOU1+0x1>
 916:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <MIN2>
 91a:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <MIN2+0x1>
 91e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <MIN1>
 922:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <MIN1+0x1>
 926:	0e 94 fe 07 	call	0xffc	; 0xffc <setbuzzer>
	
   }
 92a:	57 cc       	rjmp	.-1874   	; 0x1da <main+0xc4>

Disassembly of section .text.avrlibc:

0000125e <memcpy>:
    125e:	cf 92       	push	r12
    1260:	df 92       	push	r13
    1262:	ef 92       	push	r14
    1264:	dc 01       	movw	r26, r24
    1266:	6a 01       	movw	r12, r20
    1268:	e6 2e       	mov	r14, r22
    126a:	28 0f       	add	r18, r24
    126c:	39 1f       	adc	r19, r25
    126e:	a2 17       	cp	r26, r18
    1270:	b3 07       	cpc	r27, r19
    1272:	51 f0       	breq	.+20     	; 0x1288 <memcpy+0x2a>
    1274:	f6 01       	movw	r30, r12
    1276:	44 91       	lpm	r20, Z
    1278:	e7 fc       	sbrc	r14, 7
    127a:	40 81       	ld	r20, Z
    127c:	4d 93       	st	X+, r20
    127e:	4f ef       	ldi	r20, 0xFF	; 255
    1280:	c4 1a       	sub	r12, r20
    1282:	d4 0a       	sbc	r13, r20
    1284:	e4 0a       	sbc	r14, r20
    1286:	f3 cf       	rjmp	.-26     	; 0x126e <memcpy+0x10>
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	cf 90       	pop	r12
    128e:	08 95       	ret

Disassembly of section .text.avrlibc:

00001174 <sprintf>:
    1174:	af e0       	ldi	r26, 0x0F	; 15
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e0 ec       	ldi	r30, 0xC0	; 192
    117a:	f8 e0       	ldi	r31, 0x08	; 8
    117c:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__prologue_saves__+0x1c>
    1180:	0e 89       	ldd	r16, Y+22	; 0x16
    1182:	1f 89       	ldd	r17, Y+23	; 0x17
    1184:	86 e0       	ldi	r24, 0x06	; 6
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	1a 83       	std	Y+2, r17	; 0x02
    118a:	09 83       	std	Y+1, r16	; 0x01
    118c:	8f ef       	ldi	r24, 0xFF	; 255
    118e:	9f e7       	ldi	r25, 0x7F	; 127
    1190:	9f 83       	std	Y+7, r25	; 0x07
    1192:	8e 83       	std	Y+6, r24	; 0x06
    1194:	9e 01       	movw	r18, r28
    1196:	25 5e       	subi	r18, 0xE5	; 229
    1198:	3f 4f       	sbci	r19, 0xFF	; 255
    119a:	48 8d       	ldd	r20, Y+24	; 0x18
    119c:	59 8d       	ldd	r21, Y+25	; 0x19
    119e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	0e 94 96 04 	call	0x92c	; 0x92c <vfprintf>
    11a8:	e8 85       	ldd	r30, Y+8	; 0x08
    11aa:	f9 85       	ldd	r31, Y+9	; 0x09
    11ac:	e0 0f       	add	r30, r16
    11ae:	f1 1f       	adc	r31, r17
    11b0:	10 82       	st	Z, r1
    11b2:	2f 96       	adiw	r28, 0x0f	; 15
    11b4:	e4 e0       	ldi	r30, 0x04	; 4
    11b6:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

0000092c <vfprintf>:
 92c:	2f 92       	push	r2
 92e:	3f 92       	push	r3
 930:	4f 92       	push	r4
 932:	6f 92       	push	r6
 934:	7f 92       	push	r7
 936:	8f 92       	push	r8
 938:	9f 92       	push	r9
 93a:	af 92       	push	r10
 93c:	bf 92       	push	r11
 93e:	cf 92       	push	r12
 940:	df 92       	push	r13
 942:	ef 92       	push	r14
 944:	ff 92       	push	r15
 946:	0f 93       	push	r16
 948:	1f 93       	push	r17
 94a:	cf 93       	push	r28
 94c:	df 93       	push	r29
 94e:	cd b7       	in	r28, 0x3d	; 61
 950:	de b7       	in	r29, 0x3e	; 62
 952:	62 97       	sbiw	r28, 0x12	; 18
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	f8 94       	cli
 958:	de bf       	out	0x3e, r29	; 62
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	cd bf       	out	0x3d, r28	; 61
 95e:	6c 01       	movw	r12, r24
 960:	3a 01       	movw	r6, r20
 962:	86 2e       	mov	r8, r22
 964:	79 01       	movw	r14, r18
 966:	fc 01       	movw	r30, r24
 968:	10 86       	std	Z+8, r1	; 0x08
 96a:	17 82       	std	Z+7, r1	; 0x07
 96c:	84 81       	ldd	r24, Z+4	; 0x04
 96e:	81 ff       	sbrs	r24, 1
 970:	e7 c1       	rjmp	.+974    	; 0xd40 <vfprintf+0x414>
 972:	9e 01       	movw	r18, r28
 974:	2f 5f       	subi	r18, 0xFF	; 255
 976:	3f 4f       	sbci	r19, 0xFF	; 255
 978:	3d 87       	std	Y+13, r19	; 0x0d
 97a:	2c 87       	std	Y+12, r18	; 0x0c
 97c:	c9 01       	movw	r24, r18
 97e:	a0 e8       	ldi	r26, 0x80	; 128
 980:	88 8b       	std	Y+16, r24	; 0x10
 982:	99 8b       	std	Y+17, r25	; 0x11
 984:	aa 8b       	std	Y+18, r26	; 0x12
 986:	9f e3       	ldi	r25, 0x3F	; 63
 988:	99 2e       	mov	r9, r25
 98a:	f3 01       	movw	r30, r6
 98c:	84 91       	lpm	r24, Z
 98e:	87 fc       	sbrc	r8, 7
 990:	80 81       	ld	r24, Z
 992:	88 23       	and	r24, r24
 994:	09 f4       	brne	.+2      	; 0x998 <vfprintf+0x6c>
 996:	d0 c1       	rjmp	.+928    	; 0xd38 <vfprintf+0x40c>
 998:	48 2d       	mov	r20, r8
 99a:	93 01       	movw	r18, r6
 99c:	2f 5f       	subi	r18, 0xFF	; 255
 99e:	3f 4f       	sbci	r19, 0xFF	; 255
 9a0:	4f 4f       	sbci	r20, 0xFF	; 255
 9a2:	85 32       	cpi	r24, 0x25	; 37
 9a4:	19 f0       	breq	.+6      	; 0x9ac <vfprintf+0x80>
 9a6:	39 01       	movw	r6, r18
 9a8:	84 2e       	mov	r8, r20
 9aa:	0a c0       	rjmp	.+20     	; 0x9c0 <vfprintf+0x94>
 9ac:	f9 01       	movw	r30, r18
 9ae:	84 91       	lpm	r24, Z
 9b0:	47 fd       	sbrc	r20, 7
 9b2:	80 81       	ld	r24, Z
 9b4:	92 e0       	ldi	r25, 0x02	; 2
 9b6:	69 0e       	add	r6, r25
 9b8:	71 1c       	adc	r7, r1
 9ba:	81 1c       	adc	r8, r1
 9bc:	85 32       	cpi	r24, 0x25	; 37
 9be:	29 f4       	brne	.+10     	; 0x9ca <vfprintf+0x9e>
 9c0:	b6 01       	movw	r22, r12
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	0e 94 44 08 	call	0x1088	; 0x1088 <fputc>
 9c8:	e0 cf       	rjmp	.-64     	; 0x98a <vfprintf+0x5e>
 9ca:	b1 2c       	mov	r11, r1
 9cc:	00 e0       	ldi	r16, 0x00	; 0
 9ce:	10 e0       	ldi	r17, 0x00	; 0
 9d0:	10 32       	cpi	r17, 0x20	; 32
 9d2:	a0 f4       	brcc	.+40     	; 0x9fc <vfprintf+0xd0>
 9d4:	8b 32       	cpi	r24, 0x2B	; 43
 9d6:	69 f0       	breq	.+26     	; 0x9f2 <vfprintf+0xc6>
 9d8:	30 f4       	brcc	.+12     	; 0x9e6 <vfprintf+0xba>
 9da:	80 32       	cpi	r24, 0x20	; 32
 9dc:	59 f0       	breq	.+22     	; 0x9f4 <vfprintf+0xc8>
 9de:	83 32       	cpi	r24, 0x23	; 35
 9e0:	69 f4       	brne	.+26     	; 0x9fc <vfprintf+0xd0>
 9e2:	10 61       	ori	r17, 0x10	; 16
 9e4:	2c c0       	rjmp	.+88     	; 0xa3e <vfprintf+0x112>
 9e6:	8d 32       	cpi	r24, 0x2D	; 45
 9e8:	39 f0       	breq	.+14     	; 0x9f8 <vfprintf+0xcc>
 9ea:	80 33       	cpi	r24, 0x30	; 48
 9ec:	39 f4       	brne	.+14     	; 0x9fc <vfprintf+0xd0>
 9ee:	11 60       	ori	r17, 0x01	; 1
 9f0:	26 c0       	rjmp	.+76     	; 0xa3e <vfprintf+0x112>
 9f2:	12 60       	ori	r17, 0x02	; 2
 9f4:	14 60       	ori	r17, 0x04	; 4
 9f6:	23 c0       	rjmp	.+70     	; 0xa3e <vfprintf+0x112>
 9f8:	18 60       	ori	r17, 0x08	; 8
 9fa:	21 c0       	rjmp	.+66     	; 0xa3e <vfprintf+0x112>
 9fc:	17 fd       	sbrc	r17, 7
 9fe:	29 c0       	rjmp	.+82     	; 0xa52 <vfprintf+0x126>
 a00:	90 ed       	ldi	r25, 0xD0	; 208
 a02:	98 0f       	add	r25, r24
 a04:	9a 30       	cpi	r25, 0x0A	; 10
 a06:	78 f4       	brcc	.+30     	; 0xa26 <vfprintf+0xfa>
 a08:	16 ff       	sbrs	r17, 6
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <vfprintf+0xec>
 a0c:	aa e0       	ldi	r26, 0x0A	; 10
 a0e:	ba 9e       	mul	r11, r26
 a10:	90 0d       	add	r25, r0
 a12:	11 24       	eor	r1, r1
 a14:	b9 2e       	mov	r11, r25
 a16:	13 c0       	rjmp	.+38     	; 0xa3e <vfprintf+0x112>
 a18:	ea e0       	ldi	r30, 0x0A	; 10
 a1a:	0e 9f       	mul	r16, r30
 a1c:	90 0d       	add	r25, r0
 a1e:	11 24       	eor	r1, r1
 a20:	09 2f       	mov	r16, r25
 a22:	10 62       	ori	r17, 0x20	; 32
 a24:	0c c0       	rjmp	.+24     	; 0xa3e <vfprintf+0x112>
 a26:	8e 32       	cpi	r24, 0x2E	; 46
 a28:	21 f4       	brne	.+8      	; 0xa32 <vfprintf+0x106>
 a2a:	16 fd       	sbrc	r17, 6
 a2c:	85 c1       	rjmp	.+778    	; 0xd38 <vfprintf+0x40c>
 a2e:	10 64       	ori	r17, 0x40	; 64
 a30:	06 c0       	rjmp	.+12     	; 0xa3e <vfprintf+0x112>
 a32:	8c 36       	cpi	r24, 0x6C	; 108
 a34:	11 f4       	brne	.+4      	; 0xa3a <vfprintf+0x10e>
 a36:	10 68       	ori	r17, 0x80	; 128
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <vfprintf+0x112>
 a3a:	88 36       	cpi	r24, 0x68	; 104
 a3c:	51 f4       	brne	.+20     	; 0xa52 <vfprintf+0x126>
 a3e:	f3 01       	movw	r30, r6
 a40:	84 91       	lpm	r24, Z
 a42:	87 fc       	sbrc	r8, 7
 a44:	80 81       	ld	r24, Z
 a46:	ff ef       	ldi	r31, 0xFF	; 255
 a48:	6f 1a       	sub	r6, r31
 a4a:	7f 0a       	sbc	r7, r31
 a4c:	8f 0a       	sbc	r8, r31
 a4e:	81 11       	cpse	r24, r1
 a50:	bf cf       	rjmp	.-130    	; 0x9d0 <vfprintf+0xa4>
 a52:	98 2f       	mov	r25, r24
 a54:	9f 7d       	andi	r25, 0xDF	; 223
 a56:	95 54       	subi	r25, 0x45	; 69
 a58:	93 30       	cpi	r25, 0x03	; 3
 a5a:	28 f4       	brcc	.+10     	; 0xa66 <vfprintf+0x13a>
 a5c:	24 e0       	ldi	r18, 0x04	; 4
 a5e:	e2 0e       	add	r14, r18
 a60:	f1 1c       	adc	r15, r1
 a62:	99 82       	std	Y+1, r9	; 0x01
 a64:	0f c0       	rjmp	.+30     	; 0xa84 <vfprintf+0x158>
 a66:	83 36       	cpi	r24, 0x63	; 99
 a68:	31 f0       	breq	.+12     	; 0xa76 <vfprintf+0x14a>
 a6a:	83 37       	cpi	r24, 0x73	; 115
 a6c:	91 f0       	breq	.+36     	; 0xa92 <vfprintf+0x166>
 a6e:	83 35       	cpi	r24, 0x53	; 83
 a70:	09 f0       	breq	.+2      	; 0xa74 <vfprintf+0x148>
 a72:	63 c0       	rjmp	.+198    	; 0xb3a <vfprintf+0x20e>
 a74:	27 c0       	rjmp	.+78     	; 0xac4 <vfprintf+0x198>
 a76:	f7 01       	movw	r30, r14
 a78:	80 81       	ld	r24, Z
 a7a:	89 83       	std	Y+1, r24	; 0x01
 a7c:	97 01       	movw	r18, r14
 a7e:	2e 5f       	subi	r18, 0xFE	; 254
 a80:	3f 4f       	sbci	r19, 0xFF	; 255
 a82:	79 01       	movw	r14, r18
 a84:	28 88       	ldd	r2, Y+16	; 0x10
 a86:	39 88       	ldd	r3, Y+17	; 0x11
 a88:	4a 88       	ldd	r4, Y+18	; 0x12
 a8a:	aa 24       	eor	r10, r10
 a8c:	a3 94       	inc	r10
 a8e:	b1 2c       	mov	r11, r1
 a90:	17 c0       	rjmp	.+46     	; 0xac0 <vfprintf+0x194>
 a92:	a7 01       	movw	r20, r14
 a94:	4d 5f       	subi	r20, 0xFD	; 253
 a96:	5f 4f       	sbci	r21, 0xFF	; 255
 a98:	5f 87       	std	Y+15, r21	; 0x0f
 a9a:	4e 87       	std	Y+14, r20	; 0x0e
 a9c:	f7 01       	movw	r30, r14
 a9e:	20 80       	ld	r2, Z
 aa0:	31 80       	ldd	r3, Z+1	; 0x01
 aa2:	42 80       	ldd	r4, Z+2	; 0x02
 aa4:	16 ff       	sbrs	r17, 6
 aa6:	03 c0       	rjmp	.+6      	; 0xaae <vfprintf+0x182>
 aa8:	4b 2d       	mov	r20, r11
 aaa:	50 e0       	ldi	r21, 0x00	; 0
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <vfprintf+0x186>
 aae:	4f ef       	ldi	r20, 0xFF	; 255
 ab0:	5f ef       	ldi	r21, 0xFF	; 255
 ab2:	84 2d       	mov	r24, r4
 ab4:	b1 01       	movw	r22, r2
 ab6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <strnlen>
 aba:	5c 01       	movw	r10, r24
 abc:	ee 84       	ldd	r14, Y+14	; 0x0e
 abe:	ff 84       	ldd	r15, Y+15	; 0x0f
 ac0:	1f 77       	andi	r17, 0x7F	; 127
 ac2:	18 c0       	rjmp	.+48     	; 0xaf4 <vfprintf+0x1c8>
 ac4:	97 01       	movw	r18, r14
 ac6:	2d 5f       	subi	r18, 0xFD	; 253
 ac8:	3f 4f       	sbci	r19, 0xFF	; 255
 aca:	3f 87       	std	Y+15, r19	; 0x0f
 acc:	2e 87       	std	Y+14, r18	; 0x0e
 ace:	f7 01       	movw	r30, r14
 ad0:	20 80       	ld	r2, Z
 ad2:	31 80       	ldd	r3, Z+1	; 0x01
 ad4:	42 80       	ldd	r4, Z+2	; 0x02
 ad6:	16 ff       	sbrs	r17, 6
 ad8:	03 c0       	rjmp	.+6      	; 0xae0 <vfprintf+0x1b4>
 ada:	4b 2d       	mov	r20, r11
 adc:	50 e0       	ldi	r21, 0x00	; 0
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <vfprintf+0x1b8>
 ae0:	4f ef       	ldi	r20, 0xFF	; 255
 ae2:	5f ef       	ldi	r21, 0xFF	; 255
 ae4:	84 2d       	mov	r24, r4
 ae6:	b1 01       	movw	r22, r2
 ae8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <strnlen>
 aec:	5c 01       	movw	r10, r24
 aee:	10 68       	ori	r17, 0x80	; 128
 af0:	ee 84       	ldd	r14, Y+14	; 0x0e
 af2:	ff 84       	ldd	r15, Y+15	; 0x0f
 af4:	13 fd       	sbrc	r17, 3
 af6:	1d c0       	rjmp	.+58     	; 0xb32 <vfprintf+0x206>
 af8:	80 2f       	mov	r24, r16
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	a8 16       	cp	r10, r24
 afe:	b9 06       	cpc	r11, r25
 b00:	c0 f4       	brcc	.+48     	; 0xb32 <vfprintf+0x206>
 b02:	b6 01       	movw	r22, r12
 b04:	80 e2       	ldi	r24, 0x20	; 32
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	0e 94 44 08 	call	0x1088	; 0x1088 <fputc>
 b0c:	01 50       	subi	r16, 0x01	; 1
 b0e:	f4 cf       	rjmp	.-24     	; 0xaf8 <vfprintf+0x1cc>
 b10:	f1 01       	movw	r30, r2
 b12:	84 91       	lpm	r24, Z
 b14:	47 fc       	sbrc	r4, 7
 b16:	80 81       	ld	r24, Z
 b18:	ff ef       	ldi	r31, 0xFF	; 255
 b1a:	2f 1a       	sub	r2, r31
 b1c:	3f 0a       	sbc	r3, r31
 b1e:	4f 0a       	sbc	r4, r31
 b20:	b6 01       	movw	r22, r12
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	0e 94 44 08 	call	0x1088	; 0x1088 <fputc>
 b28:	01 11       	cpse	r16, r1
 b2a:	01 50       	subi	r16, 0x01	; 1
 b2c:	21 e0       	ldi	r18, 0x01	; 1
 b2e:	a2 1a       	sub	r10, r18
 b30:	b1 08       	sbc	r11, r1
 b32:	a1 14       	cp	r10, r1
 b34:	b1 04       	cpc	r11, r1
 b36:	61 f7       	brne	.-40     	; 0xb10 <vfprintf+0x1e4>
 b38:	f5 c0       	rjmp	.+490    	; 0xd24 <vfprintf+0x3f8>
 b3a:	84 36       	cpi	r24, 0x64	; 100
 b3c:	11 f0       	breq	.+4      	; 0xb42 <vfprintf+0x216>
 b3e:	89 36       	cpi	r24, 0x69	; 105
 b40:	71 f5       	brne	.+92     	; 0xb9e <vfprintf+0x272>
 b42:	f7 01       	movw	r30, r14
 b44:	17 ff       	sbrs	r17, 7
 b46:	08 c0       	rjmp	.+16     	; 0xb58 <vfprintf+0x22c>
 b48:	60 81       	ld	r22, Z
 b4a:	71 81       	ldd	r23, Z+1	; 0x01
 b4c:	82 81       	ldd	r24, Z+2	; 0x02
 b4e:	93 81       	ldd	r25, Z+3	; 0x03
 b50:	97 01       	movw	r18, r14
 b52:	2c 5f       	subi	r18, 0xFC	; 252
 b54:	3f 4f       	sbci	r19, 0xFF	; 255
 b56:	09 c0       	rjmp	.+18     	; 0xb6a <vfprintf+0x23e>
 b58:	60 81       	ld	r22, Z
 b5a:	71 81       	ldd	r23, Z+1	; 0x01
 b5c:	07 2e       	mov	r0, r23
 b5e:	00 0c       	add	r0, r0
 b60:	88 0b       	sbc	r24, r24
 b62:	99 0b       	sbc	r25, r25
 b64:	97 01       	movw	r18, r14
 b66:	2e 5f       	subi	r18, 0xFE	; 254
 b68:	3f 4f       	sbci	r19, 0xFF	; 255
 b6a:	79 01       	movw	r14, r18
 b6c:	1f 76       	andi	r17, 0x6F	; 111
 b6e:	31 2e       	mov	r3, r17
 b70:	97 ff       	sbrs	r25, 7
 b72:	0a c0       	rjmp	.+20     	; 0xb88 <vfprintf+0x25c>
 b74:	90 95       	com	r25
 b76:	80 95       	com	r24
 b78:	70 95       	com	r23
 b7a:	61 95       	neg	r22
 b7c:	7f 4f       	sbci	r23, 0xFF	; 255
 b7e:	8f 4f       	sbci	r24, 0xFF	; 255
 b80:	9f 4f       	sbci	r25, 0xFF	; 255
 b82:	31 2f       	mov	r19, r17
 b84:	30 68       	ori	r19, 0x80	; 128
 b86:	33 2e       	mov	r3, r19
 b88:	2a e0       	ldi	r18, 0x0A	; 10
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	ae 01       	movw	r20, r28
 b8e:	4f 5f       	subi	r20, 0xFF	; 255
 b90:	5f 4f       	sbci	r21, 0xFF	; 255
 b92:	0e 94 54 07 	call	0xea8	; 0xea8 <__ultoa_invert>
 b96:	48 2e       	mov	r4, r24
 b98:	4c 85       	ldd	r20, Y+12	; 0x0c
 b9a:	44 1a       	sub	r4, r20
 b9c:	4a c0       	rjmp	.+148    	; 0xc32 <vfprintf+0x306>
 b9e:	85 37       	cpi	r24, 0x75	; 117
 ba0:	29 f4       	brne	.+10     	; 0xbac <vfprintf+0x280>
 ba2:	1f 7e       	andi	r17, 0xEF	; 239
 ba4:	a1 2e       	mov	r10, r17
 ba6:	2a e0       	ldi	r18, 0x0A	; 10
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	25 c0       	rjmp	.+74     	; 0xbf6 <vfprintf+0x2ca>
 bac:	51 2f       	mov	r21, r17
 bae:	59 7f       	andi	r21, 0xF9	; 249
 bb0:	a5 2e       	mov	r10, r21
 bb2:	8f 36       	cpi	r24, 0x6F	; 111
 bb4:	c1 f0       	breq	.+48     	; 0xbe6 <vfprintf+0x2ba>
 bb6:	18 f4       	brcc	.+6      	; 0xbbe <vfprintf+0x292>
 bb8:	88 35       	cpi	r24, 0x58	; 88
 bba:	79 f0       	breq	.+30     	; 0xbda <vfprintf+0x2ae>
 bbc:	bd c0       	rjmp	.+378    	; 0xd38 <vfprintf+0x40c>
 bbe:	80 37       	cpi	r24, 0x70	; 112
 bc0:	19 f0       	breq	.+6      	; 0xbc8 <vfprintf+0x29c>
 bc2:	88 37       	cpi	r24, 0x78	; 120
 bc4:	21 f0       	breq	.+8      	; 0xbce <vfprintf+0x2a2>
 bc6:	b8 c0       	rjmp	.+368    	; 0xd38 <vfprintf+0x40c>
 bc8:	85 2f       	mov	r24, r21
 bca:	80 61       	ori	r24, 0x10	; 16
 bcc:	a8 2e       	mov	r10, r24
 bce:	a4 fe       	sbrs	r10, 4
 bd0:	0d c0       	rjmp	.+26     	; 0xbec <vfprintf+0x2c0>
 bd2:	9a 2d       	mov	r25, r10
 bd4:	94 60       	ori	r25, 0x04	; 4
 bd6:	a9 2e       	mov	r10, r25
 bd8:	09 c0       	rjmp	.+18     	; 0xbec <vfprintf+0x2c0>
 bda:	14 ff       	sbrs	r17, 4
 bdc:	0a c0       	rjmp	.+20     	; 0xbf2 <vfprintf+0x2c6>
 bde:	a5 2f       	mov	r26, r21
 be0:	a6 60       	ori	r26, 0x06	; 6
 be2:	aa 2e       	mov	r10, r26
 be4:	06 c0       	rjmp	.+12     	; 0xbf2 <vfprintf+0x2c6>
 be6:	28 e0       	ldi	r18, 0x08	; 8
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	05 c0       	rjmp	.+10     	; 0xbf6 <vfprintf+0x2ca>
 bec:	20 e1       	ldi	r18, 0x10	; 16
 bee:	30 e0       	ldi	r19, 0x00	; 0
 bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <vfprintf+0x2ca>
 bf2:	20 e1       	ldi	r18, 0x10	; 16
 bf4:	32 e0       	ldi	r19, 0x02	; 2
 bf6:	f7 01       	movw	r30, r14
 bf8:	a7 fe       	sbrs	r10, 7
 bfa:	08 c0       	rjmp	.+16     	; 0xc0c <vfprintf+0x2e0>
 bfc:	60 81       	ld	r22, Z
 bfe:	71 81       	ldd	r23, Z+1	; 0x01
 c00:	82 81       	ldd	r24, Z+2	; 0x02
 c02:	93 81       	ldd	r25, Z+3	; 0x03
 c04:	a7 01       	movw	r20, r14
 c06:	4c 5f       	subi	r20, 0xFC	; 252
 c08:	5f 4f       	sbci	r21, 0xFF	; 255
 c0a:	07 c0       	rjmp	.+14     	; 0xc1a <vfprintf+0x2ee>
 c0c:	60 81       	ld	r22, Z
 c0e:	71 81       	ldd	r23, Z+1	; 0x01
 c10:	80 e0       	ldi	r24, 0x00	; 0
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	a7 01       	movw	r20, r14
 c16:	4e 5f       	subi	r20, 0xFE	; 254
 c18:	5f 4f       	sbci	r21, 0xFF	; 255
 c1a:	7a 01       	movw	r14, r20
 c1c:	ae 01       	movw	r20, r28
 c1e:	4f 5f       	subi	r20, 0xFF	; 255
 c20:	5f 4f       	sbci	r21, 0xFF	; 255
 c22:	0e 94 54 07 	call	0xea8	; 0xea8 <__ultoa_invert>
 c26:	48 2e       	mov	r4, r24
 c28:	5c 85       	ldd	r21, Y+12	; 0x0c
 c2a:	45 1a       	sub	r4, r21
 c2c:	8a 2d       	mov	r24, r10
 c2e:	8f 77       	andi	r24, 0x7F	; 127
 c30:	38 2e       	mov	r3, r24
 c32:	36 fe       	sbrs	r3, 6
 c34:	0d c0       	rjmp	.+26     	; 0xc50 <vfprintf+0x324>
 c36:	93 2d       	mov	r25, r3
 c38:	9e 7f       	andi	r25, 0xFE	; 254
 c3a:	a9 2e       	mov	r10, r25
 c3c:	4b 14       	cp	r4, r11
 c3e:	58 f4       	brcc	.+22     	; 0xc56 <vfprintf+0x32a>
 c40:	34 fe       	sbrs	r3, 4
 c42:	0b c0       	rjmp	.+22     	; 0xc5a <vfprintf+0x32e>
 c44:	32 fc       	sbrc	r3, 2
 c46:	09 c0       	rjmp	.+18     	; 0xc5a <vfprintf+0x32e>
 c48:	a3 2d       	mov	r26, r3
 c4a:	ae 7e       	andi	r26, 0xEE	; 238
 c4c:	aa 2e       	mov	r10, r26
 c4e:	05 c0       	rjmp	.+10     	; 0xc5a <vfprintf+0x32e>
 c50:	14 2d       	mov	r17, r4
 c52:	a3 2c       	mov	r10, r3
 c54:	03 c0       	rjmp	.+6      	; 0xc5c <vfprintf+0x330>
 c56:	14 2d       	mov	r17, r4
 c58:	01 c0       	rjmp	.+2      	; 0xc5c <vfprintf+0x330>
 c5a:	1b 2d       	mov	r17, r11
 c5c:	a4 fe       	sbrs	r10, 4
 c5e:	0e c0       	rjmp	.+28     	; 0xc7c <vfprintf+0x350>
 c60:	fe 01       	movw	r30, r28
 c62:	e4 0d       	add	r30, r4
 c64:	f1 1d       	adc	r31, r1
 c66:	80 81       	ld	r24, Z
 c68:	80 33       	cpi	r24, 0x30	; 48
 c6a:	21 f4       	brne	.+8      	; 0xc74 <vfprintf+0x348>
 c6c:	ea 2d       	mov	r30, r10
 c6e:	e9 7e       	andi	r30, 0xE9	; 233
 c70:	ae 2e       	mov	r10, r30
 c72:	08 c0       	rjmp	.+16     	; 0xc84 <vfprintf+0x358>
 c74:	a2 fe       	sbrs	r10, 2
 c76:	05 c0       	rjmp	.+10     	; 0xc82 <vfprintf+0x356>
 c78:	1e 5f       	subi	r17, 0xFE	; 254
 c7a:	04 c0       	rjmp	.+8      	; 0xc84 <vfprintf+0x358>
 c7c:	8a 2d       	mov	r24, r10
 c7e:	86 78       	andi	r24, 0x86	; 134
 c80:	09 f0       	breq	.+2      	; 0xc84 <vfprintf+0x358>
 c82:	1f 5f       	subi	r17, 0xFF	; 255
 c84:	a3 fc       	sbrc	r10, 3
 c86:	11 c0       	rjmp	.+34     	; 0xcaa <vfprintf+0x37e>
 c88:	a0 fe       	sbrs	r10, 0
 c8a:	06 c0       	rjmp	.+12     	; 0xc98 <vfprintf+0x36c>
 c8c:	10 17       	cp	r17, r16
 c8e:	88 f4       	brcc	.+34     	; 0xcb2 <vfprintf+0x386>
 c90:	04 0d       	add	r16, r4
 c92:	b0 2e       	mov	r11, r16
 c94:	b1 1a       	sub	r11, r17
 c96:	0e c0       	rjmp	.+28     	; 0xcb4 <vfprintf+0x388>
 c98:	10 17       	cp	r17, r16
 c9a:	60 f4       	brcc	.+24     	; 0xcb4 <vfprintf+0x388>
 c9c:	b6 01       	movw	r22, r12
 c9e:	80 e2       	ldi	r24, 0x20	; 32
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	0e 94 44 08 	call	0x1088	; 0x1088 <fputc>
 ca6:	1f 5f       	subi	r17, 0xFF	; 255
 ca8:	f7 cf       	rjmp	.-18     	; 0xc98 <vfprintf+0x36c>
 caa:	10 17       	cp	r17, r16
 cac:	18 f4       	brcc	.+6      	; 0xcb4 <vfprintf+0x388>
 cae:	01 1b       	sub	r16, r17
 cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <vfprintf+0x38a>
 cb2:	b4 2c       	mov	r11, r4
 cb4:	00 e0       	ldi	r16, 0x00	; 0
 cb6:	a4 fe       	sbrs	r10, 4
 cb8:	10 c0       	rjmp	.+32     	; 0xcda <vfprintf+0x3ae>
 cba:	b6 01       	movw	r22, r12
 cbc:	80 e3       	ldi	r24, 0x30	; 48
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	0e 94 44 08 	call	0x1088	; 0x1088 <fputc>
 cc4:	a2 fe       	sbrs	r10, 2
 cc6:	17 c0       	rjmp	.+46     	; 0xcf6 <vfprintf+0x3ca>
 cc8:	a1 fc       	sbrc	r10, 1
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <vfprintf+0x3a6>
 ccc:	88 e7       	ldi	r24, 0x78	; 120
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <vfprintf+0x3aa>
 cd2:	88 e5       	ldi	r24, 0x58	; 88
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	b6 01       	movw	r22, r12
 cd8:	0c c0       	rjmp	.+24     	; 0xcf2 <vfprintf+0x3c6>
 cda:	8a 2d       	mov	r24, r10
 cdc:	86 78       	andi	r24, 0x86	; 134
 cde:	59 f0       	breq	.+22     	; 0xcf6 <vfprintf+0x3ca>
 ce0:	a1 fe       	sbrs	r10, 1
 ce2:	02 c0       	rjmp	.+4      	; 0xce8 <vfprintf+0x3bc>
 ce4:	8b e2       	ldi	r24, 0x2B	; 43
 ce6:	01 c0       	rjmp	.+2      	; 0xcea <vfprintf+0x3be>
 ce8:	80 e2       	ldi	r24, 0x20	; 32
 cea:	a7 fc       	sbrc	r10, 7
 cec:	8d e2       	ldi	r24, 0x2D	; 45
 cee:	b6 01       	movw	r22, r12
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	0e 94 44 08 	call	0x1088	; 0x1088 <fputc>
 cf6:	4b 14       	cp	r4, r11
 cf8:	38 f4       	brcc	.+14     	; 0xd08 <vfprintf+0x3dc>
 cfa:	b6 01       	movw	r22, r12
 cfc:	80 e3       	ldi	r24, 0x30	; 48
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	0e 94 44 08 	call	0x1088	; 0x1088 <fputc>
 d04:	ba 94       	dec	r11
 d06:	f7 cf       	rjmp	.-18     	; 0xcf6 <vfprintf+0x3ca>
 d08:	4a 94       	dec	r4
 d0a:	e1 e0       	ldi	r30, 0x01	; 1
 d0c:	f0 e0       	ldi	r31, 0x00	; 0
 d0e:	ec 0f       	add	r30, r28
 d10:	fd 1f       	adc	r31, r29
 d12:	e4 0d       	add	r30, r4
 d14:	f1 1d       	adc	r31, r1
 d16:	80 81       	ld	r24, Z
 d18:	b6 01       	movw	r22, r12
 d1a:	90 e0       	ldi	r25, 0x00	; 0
 d1c:	0e 94 44 08 	call	0x1088	; 0x1088 <fputc>
 d20:	41 10       	cpse	r4, r1
 d22:	f2 cf       	rjmp	.-28     	; 0xd08 <vfprintf+0x3dc>
 d24:	00 23       	and	r16, r16
 d26:	09 f4       	brne	.+2      	; 0xd2a <vfprintf+0x3fe>
 d28:	30 ce       	rjmp	.-928    	; 0x98a <vfprintf+0x5e>
 d2a:	b6 01       	movw	r22, r12
 d2c:	80 e2       	ldi	r24, 0x20	; 32
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	0e 94 44 08 	call	0x1088	; 0x1088 <fputc>
 d34:	01 50       	subi	r16, 0x01	; 1
 d36:	f6 cf       	rjmp	.-20     	; 0xd24 <vfprintf+0x3f8>
 d38:	f6 01       	movw	r30, r12
 d3a:	87 81       	ldd	r24, Z+7	; 0x07
 d3c:	90 85       	ldd	r25, Z+8	; 0x08
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <vfprintf+0x418>
 d40:	8f ef       	ldi	r24, 0xFF	; 255
 d42:	9f ef       	ldi	r25, 0xFF	; 255
 d44:	62 96       	adiw	r28, 0x12	; 18
 d46:	0f b6       	in	r0, 0x3f	; 63
 d48:	f8 94       	cli
 d4a:	de bf       	out	0x3e, r29	; 62
 d4c:	0f be       	out	0x3f, r0	; 63
 d4e:	cd bf       	out	0x3d, r28	; 61
 d50:	df 91       	pop	r29
 d52:	cf 91       	pop	r28
 d54:	1f 91       	pop	r17
 d56:	0f 91       	pop	r16
 d58:	ff 90       	pop	r15
 d5a:	ef 90       	pop	r14
 d5c:	df 90       	pop	r13
 d5e:	cf 90       	pop	r12
 d60:	bf 90       	pop	r11
 d62:	af 90       	pop	r10
 d64:	9f 90       	pop	r9
 d66:	8f 90       	pop	r8
 d68:	7f 90       	pop	r7
 d6a:	6f 90       	pop	r6
 d6c:	4f 90       	pop	r4
 d6e:	3f 90       	pop	r3
 d70:	2f 90       	pop	r2
 d72:	08 95       	ret

Disassembly of section .text.avrlibc:

000011f2 <strnlen>:
    11f2:	cf 92       	push	r12
    11f4:	df 92       	push	r13
    11f6:	ef 92       	push	r14
    11f8:	6b 01       	movw	r12, r22
    11fa:	e8 2e       	mov	r14, r24
    11fc:	a8 2f       	mov	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	41 15       	cp	r20, r1
    1202:	51 05       	cpc	r21, r1
    1204:	31 f4       	brne	.+12     	; 0x1212 <strnlen+0x20>
    1206:	8c 19       	sub	r24, r12
    1208:	9d 09       	sbc	r25, r13
    120a:	ef 90       	pop	r14
    120c:	df 90       	pop	r13
    120e:	cf 90       	pop	r12
    1210:	08 95       	ret
    1212:	fc 01       	movw	r30, r24
    1214:	24 91       	lpm	r18, Z
    1216:	a7 fd       	sbrc	r26, 7
    1218:	20 81       	ld	r18, Z
    121a:	22 23       	and	r18, r18
    121c:	a1 f3       	breq	.-24     	; 0x1206 <strnlen+0x14>
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	a1 1d       	adc	r26, r1
    1222:	41 50       	subi	r20, 0x01	; 1
    1224:	51 09       	sbc	r21, r1
    1226:	ec cf       	rjmp	.-40     	; 0x1200 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00001088 <fputc>:
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	fb 01       	movw	r30, r22
    1092:	24 81       	ldd	r18, Z+4	; 0x04
    1094:	21 fd       	sbrc	r18, 1
    1096:	03 c0       	rjmp	.+6      	; 0x109e <fputc+0x16>
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	2c c0       	rjmp	.+88     	; 0x10f6 <fputc+0x6e>
    109e:	22 ff       	sbrs	r18, 2
    10a0:	16 c0       	rjmp	.+44     	; 0x10ce <fputc+0x46>
    10a2:	47 81       	ldd	r20, Z+7	; 0x07
    10a4:	50 85       	ldd	r21, Z+8	; 0x08
    10a6:	25 81       	ldd	r18, Z+5	; 0x05
    10a8:	36 81       	ldd	r19, Z+6	; 0x06
    10aa:	42 17       	cp	r20, r18
    10ac:	53 07       	cpc	r21, r19
    10ae:	44 f4       	brge	.+16     	; 0x10c0 <fputc+0x38>
    10b0:	a0 81       	ld	r26, Z
    10b2:	b1 81       	ldd	r27, Z+1	; 0x01
    10b4:	9d 01       	movw	r18, r26
    10b6:	2f 5f       	subi	r18, 0xFF	; 255
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	31 83       	std	Z+1, r19	; 0x01
    10bc:	20 83       	st	Z, r18
    10be:	8c 93       	st	X, r24
    10c0:	27 81       	ldd	r18, Z+7	; 0x07
    10c2:	30 85       	ldd	r19, Z+8	; 0x08
    10c4:	2f 5f       	subi	r18, 0xFF	; 255
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	30 87       	std	Z+8, r19	; 0x08
    10ca:	27 83       	std	Z+7, r18	; 0x07
    10cc:	14 c0       	rjmp	.+40     	; 0x10f6 <fputc+0x6e>
    10ce:	8b 01       	movw	r16, r22
    10d0:	ec 01       	movw	r28, r24
    10d2:	fb 01       	movw	r30, r22
    10d4:	01 84       	ldd	r0, Z+9	; 0x09
    10d6:	f2 85       	ldd	r31, Z+10	; 0x0a
    10d8:	e0 2d       	mov	r30, r0
    10da:	09 95       	icall
    10dc:	89 2b       	or	r24, r25
    10de:	e1 f6       	brne	.-72     	; 0x1098 <fputc+0x10>
    10e0:	d8 01       	movw	r26, r16
    10e2:	17 96       	adiw	r26, 0x07	; 7
    10e4:	8d 91       	ld	r24, X+
    10e6:	9c 91       	ld	r25, X
    10e8:	18 97       	sbiw	r26, 0x08	; 8
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	18 96       	adiw	r26, 0x08	; 8
    10ee:	9c 93       	st	X, r25
    10f0:	8e 93       	st	-X, r24
    10f2:	17 97       	sbiw	r26, 0x07	; 7
    10f4:	ce 01       	movw	r24, r28
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	08 95       	ret

Disassembly of section .text.avrlibc:

00000ea8 <__ultoa_invert>:
 ea8:	fa 01       	movw	r30, r20
 eaa:	aa 27       	eor	r26, r26
 eac:	28 30       	cpi	r18, 0x08	; 8
 eae:	51 f1       	breq	.+84     	; 0xf04 <__ultoa_invert+0x5c>
 eb0:	20 31       	cpi	r18, 0x10	; 16
 eb2:	81 f1       	breq	.+96     	; 0xf14 <__ultoa_invert+0x6c>
 eb4:	e8 94       	clt
 eb6:	6f 93       	push	r22
 eb8:	6e 7f       	andi	r22, 0xFE	; 254
 eba:	6e 5f       	subi	r22, 0xFE	; 254
 ebc:	7f 4f       	sbci	r23, 0xFF	; 255
 ebe:	8f 4f       	sbci	r24, 0xFF	; 255
 ec0:	9f 4f       	sbci	r25, 0xFF	; 255
 ec2:	af 4f       	sbci	r26, 0xFF	; 255
 ec4:	b1 e0       	ldi	r27, 0x01	; 1
 ec6:	3e d0       	rcall	.+124    	; 0xf44 <__ultoa_invert+0x9c>
 ec8:	b4 e0       	ldi	r27, 0x04	; 4
 eca:	3c d0       	rcall	.+120    	; 0xf44 <__ultoa_invert+0x9c>
 ecc:	67 0f       	add	r22, r23
 ece:	78 1f       	adc	r23, r24
 ed0:	89 1f       	adc	r24, r25
 ed2:	9a 1f       	adc	r25, r26
 ed4:	a1 1d       	adc	r26, r1
 ed6:	68 0f       	add	r22, r24
 ed8:	79 1f       	adc	r23, r25
 eda:	8a 1f       	adc	r24, r26
 edc:	91 1d       	adc	r25, r1
 ede:	a1 1d       	adc	r26, r1
 ee0:	6a 0f       	add	r22, r26
 ee2:	71 1d       	adc	r23, r1
 ee4:	81 1d       	adc	r24, r1
 ee6:	91 1d       	adc	r25, r1
 ee8:	a1 1d       	adc	r26, r1
 eea:	20 d0       	rcall	.+64     	; 0xf2c <__ultoa_invert+0x84>
 eec:	09 f4       	brne	.+2      	; 0xef0 <__ultoa_invert+0x48>
 eee:	68 94       	set
 ef0:	3f 91       	pop	r19
 ef2:	2a e0       	ldi	r18, 0x0A	; 10
 ef4:	26 9f       	mul	r18, r22
 ef6:	11 24       	eor	r1, r1
 ef8:	30 19       	sub	r19, r0
 efa:	30 5d       	subi	r19, 0xD0	; 208
 efc:	31 93       	st	Z+, r19
 efe:	de f6       	brtc	.-74     	; 0xeb6 <__ultoa_invert+0xe>
 f00:	cf 01       	movw	r24, r30
 f02:	08 95       	ret
 f04:	46 2f       	mov	r20, r22
 f06:	47 70       	andi	r20, 0x07	; 7
 f08:	40 5d       	subi	r20, 0xD0	; 208
 f0a:	41 93       	st	Z+, r20
 f0c:	b3 e0       	ldi	r27, 0x03	; 3
 f0e:	0f d0       	rcall	.+30     	; 0xf2e <__ultoa_invert+0x86>
 f10:	c9 f7       	brne	.-14     	; 0xf04 <__ultoa_invert+0x5c>
 f12:	f6 cf       	rjmp	.-20     	; 0xf00 <__ultoa_invert+0x58>
 f14:	46 2f       	mov	r20, r22
 f16:	4f 70       	andi	r20, 0x0F	; 15
 f18:	40 5d       	subi	r20, 0xD0	; 208
 f1a:	4a 33       	cpi	r20, 0x3A	; 58
 f1c:	18 f0       	brcs	.+6      	; 0xf24 <__ultoa_invert+0x7c>
 f1e:	49 5d       	subi	r20, 0xD9	; 217
 f20:	31 fd       	sbrc	r19, 1
 f22:	40 52       	subi	r20, 0x20	; 32
 f24:	41 93       	st	Z+, r20
 f26:	02 d0       	rcall	.+4      	; 0xf2c <__ultoa_invert+0x84>
 f28:	a9 f7       	brne	.-22     	; 0xf14 <__ultoa_invert+0x6c>
 f2a:	ea cf       	rjmp	.-44     	; 0xf00 <__ultoa_invert+0x58>
 f2c:	b4 e0       	ldi	r27, 0x04	; 4
 f2e:	a6 95       	lsr	r26
 f30:	97 95       	ror	r25
 f32:	87 95       	ror	r24
 f34:	77 95       	ror	r23
 f36:	67 95       	ror	r22
 f38:	ba 95       	dec	r27
 f3a:	c9 f7       	brne	.-14     	; 0xf2e <__ultoa_invert+0x86>
 f3c:	00 97       	sbiw	r24, 0x00	; 0
 f3e:	61 05       	cpc	r22, r1
 f40:	71 05       	cpc	r23, r1
 f42:	08 95       	ret
 f44:	9b 01       	movw	r18, r22
 f46:	ac 01       	movw	r20, r24
 f48:	0a 2e       	mov	r0, r26
 f4a:	06 94       	lsr	r0
 f4c:	57 95       	ror	r21
 f4e:	47 95       	ror	r20
 f50:	37 95       	ror	r19
 f52:	27 95       	ror	r18
 f54:	ba 95       	dec	r27
 f56:	c9 f7       	brne	.-14     	; 0xf4a <__ultoa_invert+0xa2>
 f58:	62 0f       	add	r22, r18
 f5a:	73 1f       	adc	r23, r19
 f5c:	84 1f       	adc	r24, r20
 f5e:	95 1f       	adc	r25, r21
 f60:	a0 1d       	adc	r26, r0
 f62:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

000011ba <__prologue_saves__>:
    11ba:	2f 92       	push	r2
    11bc:	3f 92       	push	r3
    11be:	4f 92       	push	r4
    11c0:	5f 92       	push	r5
    11c2:	6f 92       	push	r6
    11c4:	7f 92       	push	r7
    11c6:	8f 92       	push	r8
    11c8:	9f 92       	push	r9
    11ca:	af 92       	push	r10
    11cc:	bf 92       	push	r11
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	ca 1b       	sub	r28, r26
    11e4:	db 0b       	sbc	r29, r27
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00001228 <__epilogue_restores__>:
    1228:	2a 88       	ldd	r2, Y+18	; 0x12
    122a:	39 88       	ldd	r3, Y+17	; 0x11
    122c:	48 88       	ldd	r4, Y+16	; 0x10
    122e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1230:	6e 84       	ldd	r6, Y+14	; 0x0e
    1232:	7d 84       	ldd	r7, Y+13	; 0x0d
    1234:	8c 84       	ldd	r8, Y+12	; 0x0c
    1236:	9b 84       	ldd	r9, Y+11	; 0x0b
    1238:	aa 84       	ldd	r10, Y+10	; 0x0a
    123a:	b9 84       	ldd	r11, Y+9	; 0x09
    123c:	c8 84       	ldd	r12, Y+8	; 0x08
    123e:	df 80       	ldd	r13, Y+7	; 0x07
    1240:	ee 80       	ldd	r14, Y+6	; 0x06
    1242:	fd 80       	ldd	r15, Y+5	; 0x05
    1244:	0c 81       	ldd	r16, Y+4	; 0x04
    1246:	1b 81       	ldd	r17, Y+3	; 0x03
    1248:	aa 81       	ldd	r26, Y+2	; 0x02
    124a:	b9 81       	ldd	r27, Y+1	; 0x01
    124c:	ce 0f       	add	r28, r30
    124e:	d1 1d       	adc	r29, r1
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	ed 01       	movw	r28, r26
    125c:	08 95       	ret
